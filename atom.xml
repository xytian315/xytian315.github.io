<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kristy&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xytian315.github.io/"/>
  <updated>2017-01-22T03:48:47.000Z</updated>
  <id>http://xytian315.github.io/</id>
  
  <author>
    <name>Kristy Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 19 Remove nth node from end of list</title>
    <link href="http://xytian315.github.io/2017/01/21/leetcode-19-Remove-nth-node-from-end-of-list/"/>
    <id>http://xytian315.github.io/2017/01/21/leetcode-19-Remove-nth-node-from-end-of-list/</id>
    <published>2017-01-22T02:57:37.000Z</published>
    <updated>2017-01-22T03:48:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-19-Remove-Nth-Node-From-End-of-List"><a href="#Question-19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="Question: 19. Remove Nth Node From End of List"></a>Question: 19. Remove Nth Node From End of List</h3><p>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example,</p>
<p>   Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>
<p>   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.<br>Note:<br>Given n will always be valid.<br>Try to do this in one pass.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//use two pointers one slow, one fast</span></span><br><span class="line">        ListNode start = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode slow = start;</span><br><span class="line">        ListNode fast = start;</span><br><span class="line">        slow.next = head;</span><br><span class="line">        <span class="comment">//make the gap between slow and fast to be n </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//move the slow and fast pointer until the end of the node, keep the same distance</span></span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//slow's next one is the one we want to remove</span></span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="comment">//return the orginal head</span></span><br><span class="line">        <span class="keyword">return</span> start.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p><a href="https://discuss.leetcode.com/topic/7031/simple-java-solution-in-one-pass" target="_blank" rel="external">https://discuss.leetcode.com/topic/7031/simple-java-solution-in-one-pass</a><br>Move one pointer fast –&gt; n+1 places forward, to maintain a gap of n between the two pointers and then move both at the same speed. Finally, when the fast pointer reaches the end, the slow pointer will be n+1 places behind - just the right spot for it to be able to skip the next node.</p>
<p>Since the question gives that n is valid, not too many checks have to be put in place. Otherwise, this would be necessary.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-19-Remove-Nth-Node-From-End-of-List&quot;&gt;&lt;a href=&quot;#Question-19-Remove-Nth-Node-From-End-of-List&quot; class=&quot;headerlink&quot; title=&quot;Ques
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 438 Find all anagrams in a string</title>
    <link href="http://xytian315.github.io/2016/12/13/leetcode-438-Find-all-anagrams-in-a-string/"/>
    <id>http://xytian315.github.io/2016/12/13/leetcode-438-Find-all-anagrams-in-a-string/</id>
    <published>2016-12-13T08:11:15.000Z</published>
    <updated>2016-12-13T08:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-438-Find-All-Anagrams-in-a-String"><a href="#Question-438-Find-All-Anagrams-in-a-String" class="headerlink" title="Question: 438. Find All Anagrams in a String"></a>Question: 438. Find All Anagrams in a String</h3><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>
<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>
<p>The order of output does not matter.</p>
<p>Example 1:</p>
<p>Input:<br>s: “cbaebabacd” p: “abc”</p>
<p>Output:<br>[0, 6]</p>
<p>Explanation:<br>The substring with start index = 0 is “cba”, which is an anagram of “abc”.<br>The substring with start index = 6 is “bac”, which is an anagram of “abc”.<br>Example 2:</p>
<p>Input:<br>s: “abab” p: “ab”</p>
<p>Output:<br>[0, 1, 2]</p>
<p>Explanation:<br>The substring with start index = 0 is “ab”, which is an anagram of “ab”.<br>The substring with start index = 1 is “ba”, which is an anagram of “ab”.<br>The substring with start index = 2 is “ab”, which is an anagram of “ab”.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || p == <span class="keyword">null</span> || p.length() == <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] hash = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>]; <span class="comment">//character hash</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//record each character in p to hash</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : p.toCharArray()) &#123;</span><br><span class="line">        hash[c]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//two points, initialize count to p's length</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, count = p.length();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">        <span class="comment">//move right everytime, if the character exists in p's hash, decrease the count</span></span><br><span class="line">        <span class="comment">//current hash value &gt;= 1 means the character is existing in p</span></span><br><span class="line">        <span class="keyword">if</span> (hash[s.charAt(right)] &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        hash[s.charAt(right)]--;</span><br><span class="line">        right++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//when the count is down to 0, means we found the right anagram</span></span><br><span class="line">        <span class="comment">//then add window's left to result list</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//if we find the window's size equals to p, then we have to move left (narrow the window) to find the new match window</span></span><br><span class="line">        <span class="comment">//++ to reset the hash because we kicked out the left</span></span><br><span class="line">        <span class="comment">//only increase the count if the character is in p</span></span><br><span class="line">        <span class="comment">//the count &gt;= 0 indicate it was original in the hash, cuz it won't go below 0</span></span><br><span class="line">        <span class="keyword">if</span> (right - left == p.length() ) &#123;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> (hash[s.charAt(left)] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[s.charAt(left)]++;</span><br><span class="line">            left++;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p><a href="https://discuss.leetcode.com/topic/64434/shortest-concise-java-o-n-sliding-window-solution/4" target="_blank" rel="external">https://discuss.leetcode.com/topic/64434/shortest-concise-java-o-n-sliding-window-solution/4</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-438-Find-All-Anagrams-in-a-String&quot;&gt;&lt;a href=&quot;#Question-438-Find-All-Anagrams-in-a-String&quot; class=&quot;headerlink&quot; title=&quot;Question: 438. Find All Anagrams in a String&quot;&gt;&lt;/a&gt;Question: 438. Find All Anagrams in a String&lt;/h3&gt;&lt;p&gt;Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.&lt;/p&gt;
&lt;p&gt;Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.&lt;/p&gt;
&lt;p&gt;The order of output does not matter.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;s: “cbaebabacd” p: “abc”&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;[0, 6]&lt;/p&gt;
&lt;p&gt;Explanation:&lt;br&gt;The substring with start index = 0 is “cba”, which is an anagram of “abc”.&lt;br&gt;The substring with start index = 6 is “bac”, which is an anagram of “abc”.&lt;br&gt;Example 2:&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;s: “abab” p: “ab”&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;[0, 1, 2]&lt;/p&gt;
&lt;p&gt;Explanation:&lt;br&gt;The substring with start index = 0 is “ab”, which is an anagram of “ab”.&lt;br&gt;The substring with start index = 1 is “ba”, which is an anagram of “ab”.&lt;br&gt;The substring with start index = 2 is “ab”, which is an anagram of “ab”.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 409 Longest Palindrome</title>
    <link href="http://xytian315.github.io/2016/12/11/leetcode-409-Longest-Palindrome/"/>
    <id>http://xytian315.github.io/2016/12/11/leetcode-409-Longest-Palindrome/</id>
    <published>2016-12-12T05:24:46.000Z</published>
    <updated>2016-12-12T05:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-409-Longest-Palindrome"><a href="#Question-409-Longest-Palindrome" class="headerlink" title="Question: 409. Longest Palindrome"></a>Question: 409. Longest Palindrome</h3><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example “Aa” is not considered a palindrome here.</p>
<p>Note:<br>Assume the length of given string will not exceed 1,010.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(set.contains(c))&#123;</span><br><span class="line">                set.remove(c);</span><br><span class="line">                count+=<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!set.isEmpty()) count++;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p> just count the number of same pairs, then this can be used to put in the different direction to consist of palindrome. Then if there exist more chars, we can put one in the middle</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-409-Longest-Palindrome&quot;&gt;&lt;a href=&quot;#Question-409-Longest-Palindrome&quot; class=&quot;headerlink&quot; title=&quot;Question: 409. Longest Palindrome&quot;&gt;&lt;/a&gt;Question: 409. Longest Palindrome&lt;/h3&gt;&lt;p&gt;Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.&lt;/p&gt;
&lt;p&gt;This is case sensitive, for example “Aa” is not considered a palindrome here.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Assume the length of given string will not exceed 1,010.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>389 find the difference</title>
    <link href="http://xytian315.github.io/2016/12/10/leetcode-389-find-the-difference/"/>
    <id>http://xytian315.github.io/2016/12/10/leetcode-389-find-the-difference/</id>
    <published>2016-12-11T06:39:42.000Z</published>
    <updated>2016-12-11T06:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-389-Find-the-Difference"><a href="#Question-389-Find-the-Difference" class="headerlink" title="Question: 389. Find the Difference"></a>Question: 389. Find the Difference</h3><p>Given two strings s and t which consist of only lowercase letters.</p>
<p>String t is generated by random shuffling string s and then add one more letter at a random position.</p>
<p>Find the letter that was added in t.</p>
<p>Example:</p>
<p>Input:<br>s = “abcd”<br>t = “abcde”</p>
<p>Output:<br>e</p>
<p>Explanation:<br>‘e’ is the letter that was added.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c =s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                map.put(c, map.get(c)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c=t.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(c)&lt;=<span class="number">0</span>) <span class="keyword">return</span> c;</span><br><span class="line">                map.put(c, map.get(c)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//better solution in discussion</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize variables to store sum of ASCII codes for </span></span><br><span class="line">        <span class="comment">// each string</span></span><br><span class="line">        <span class="keyword">int</span> charCodeS = <span class="number">0</span>, charCodeT = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Iterate through both strings and char codes</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) charCodeS += (<span class="keyword">int</span>)s.charAt(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); ++i) charCodeT += (<span class="keyword">int</span>)t.charAt(i);</span><br><span class="line">        <span class="comment">// Return the difference between 2 strings as char</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>)(charCodeT - charCodeS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>1.just use the map to record the characters and count in the first s; loop the second s, descrease the correspoing value(count) by 1. if it doesn’t exist in the map it is the result; also if the count reach the 0, it is the result too.</p>
<ol>
<li>use ASCII code to represent the character in the string</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-389-Find-the-Difference&quot;&gt;&lt;a href=&quot;#Question-389-Find-the-Difference&quot; class=&quot;headerlink&quot; title=&quot;Question: 389. Find the Difference&quot;&gt;&lt;/a&gt;Question: 389. Find the Difference&lt;/h3&gt;&lt;p&gt;Given two strings s and t which consist of only lowercase letters.&lt;/p&gt;
&lt;p&gt;String t is generated by random shuffling string s and then add one more letter at a random position.&lt;/p&gt;
&lt;p&gt;Find the letter that was added in t.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;s = “abcd”&lt;br&gt;t = “abcde”&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;e&lt;/p&gt;
&lt;p&gt;Explanation:&lt;br&gt;‘e’ is the letter that was added.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>350 Intersection or two arrays II</title>
    <link href="http://xytian315.github.io/2016/12/10/leetcode-350-Intersection-or-two-arrays-II/"/>
    <id>http://xytian315.github.io/2016/12/10/leetcode-350-Intersection-or-two-arrays-II/</id>
    <published>2016-12-11T06:17:59.000Z</published>
    <updated>2016-12-11T06:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-350-Intersection-of-Two-Arrays-II"><a href="#Question-350-Intersection-of-Two-Arrays-II" class="headerlink" title="Question: 350. Intersection of Two Arrays II"></a>Question: 350. Intersection of Two Arrays II</h3><p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>
<p>Note:<br>Each element in the result should appear as many times as it shows in both arrays.<br>The result can be in any order.<br>Follow up:<br>What if the given array is already sorted? How would you optimize your algorithm?<br>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?<br>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution </span></span><br><span class="line"><span class="comment">//time O(nlogn) (sort)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">        Arrays.sort(nums2);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; array=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums1.length &amp;&amp; j&lt;nums2.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i]&lt;nums2[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums1[i]&gt;nums2[j])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                array.add(nums1[i]);</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[array.size()];</span><br><span class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: array)&#123;</span><br><span class="line">            result[index]=e;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//another solution using hashmap</span></span><br><span class="line"><span class="comment">//time O(n) spaceO(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; array=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: nums1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(e))&#123;</span><br><span class="line">                map.put(e, map.get(e)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(e, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(e) &amp;&amp; map.get(e)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                array.add(e);</span><br><span class="line">                map.put(e, map.get(e)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[array.size()];</span><br><span class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: array)&#123;</span><br><span class="line">            result[index]=e;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>1.sort two array, used two pointers to compare each number. based comparison,increment the corresponding index.<br>2.use hashmap to tracking all the numbers and count. loop the second array, if it contains the key and value&gt;0, put it into result, also decrease the count(value);</p>
<ol>
<li>follow up answer from discussion<br>What if elements of nums2 are stored on disk, and the memory is<br>limited such that you cannot load all elements into the memory at<br>once?<br>If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory, and record the intersections.</li>
</ol>
<p>If both nums1 and nums2 are so huge that neither fit into the memory, sort them individually (external sort), then read 2 elements from each array at a time in memory, record intersections.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-350-Intersection-of-Two-Arrays-II&quot;&gt;&lt;a href=&quot;#Question-350-Intersection-of-Two-Arrays-II&quot; class=&quot;headerlink&quot; title=&quot;Question: 350. Intersection of Two Arrays II&quot;&gt;&lt;/a&gt;Question: 350. Intersection of Two Arrays II&lt;/h3&gt;&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Each element in the result should appear as many times as it shows in both arrays.&lt;br&gt;The result can be in any order.&lt;br&gt;Follow up:&lt;br&gt;What if the given array is already sorted? How would you optimize your algorithm?&lt;br&gt;What if nums1’s size is small compared to nums2’s size? Which algorithm is better?&lt;br&gt;What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
      <category term="sort" scheme="http://xytian315.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 349 Intersection of two arrays</title>
    <link href="http://xytian315.github.io/2016/12/10/leetcode-349-Intersection-of-two-arrays/"/>
    <id>http://xytian315.github.io/2016/12/10/leetcode-349-Intersection-of-two-arrays/</id>
    <published>2016-12-11T06:05:28.000Z</published>
    <updated>2016-12-11T06:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-349-Intersection-of-Two-Arrays"><a href="#Question-349-Intersection-of-Two-Arrays" class="headerlink" title="Question: 349. Intersection of Two Arrays"></a>Question: 349. Intersection of Two Arrays</h3><p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].<br>Note:<br>Each element in the result must be unique.<br>The result can be in any order.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele: nums1)&#123;</span><br><span class="line">            set1.add(ele);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele: nums2)&#123;</span><br><span class="line">            set2.add(ele);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele:set1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set2.add(ele))&#123;</span><br><span class="line">                set.add(ele);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result= <span class="keyword">new</span> <span class="keyword">int</span>[set.size()];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element:set)&#123;</span><br><span class="line">            result[index]=element;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//actually you can use only two sets</span></span><br><span class="line"><span class="comment">// time O(n) space O(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele: nums1)&#123;</span><br><span class="line">            set1.add(ele);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set1.contains(ele))&#123;</span><br><span class="line">                set.add(ele);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result= <span class="keyword">new</span> <span class="keyword">int</span>[set.size()];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element:set)&#123;</span><br><span class="line">            result[index]=element;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>use one set to record all the unique numbers. Looping the second array, if the set contain that number, put it into intersection set</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-349-Intersection-of-Two-Arrays&quot;&gt;&lt;a href=&quot;#Question-349-Intersection-of-Two-Arrays&quot; class=&quot;headerlink&quot; title=&quot;Question: 349. Intersection of Two Arrays&quot;&gt;&lt;/a&gt;Question: 349. Intersection of Two Arrays&lt;/h3&gt;&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].&lt;br&gt;Note:&lt;br&gt;Each element in the result must be unique.&lt;br&gt;The result can be in any order.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 290 word pattern</title>
    <link href="http://xytian315.github.io/2016/12/09/leetcode-290-word-pattern/"/>
    <id>http://xytian315.github.io/2016/12/09/leetcode-290-word-pattern/</id>
    <published>2016-12-10T07:37:22.000Z</published>
    <updated>2016-12-10T07:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-290-Word-Pattern"><a href="#Question-290-Word-Pattern" class="headerlink" title="Question: 290. Word Pattern"></a>Question: 290. Word Pattern</h3><p>Given a pattern and a string str, find if str follows the same pattern.</p>
<p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</p>
<p>Examples:<br>pattern = “abba”, str = “dog cat cat dog” should return true.<br>pattern = “abba”, str = “dog cat cat fish” should return false.<br>pattern = “aaaa”, str = “dog cat cat dog” should return false.<br>pattern = “abba”, str = “dog dog dog dog” should return false.<br>Notes:<br>You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the question is exactly same as isomorphic string</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] strings =str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(pattern.length()!=strings.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Character, String&gt; map = <span class="keyword">new</span> HashMap&lt;Character, String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pattern.length();i++)&#123;</span><br><span class="line">            <span class="comment">//has seen the key(char) before the value must be the same</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(pattern.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(pattern.charAt(i)).compareTo(strings[i])!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//same value can not be mapping to different keys</span></span><br><span class="line">                <span class="keyword">if</span>(map.containsValue(strings[i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(pattern.charAt(i), strings[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//my Solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] strings =str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(pattern.length()!=strings.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pattern.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(pattern.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">int</span> index = map.get(pattern.charAt(i));</span><br><span class="line">                <span class="keyword">if</span>(strings[i].compareTo(strings[index])!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.isEmpty() &amp;&amp; strings[i].compareTo(strings[last])==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(pattern.charAt(i),i);</span><br><span class="line">                last =i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>This question is exactly same as isomorphic string<br>in isomorphic string is char mapping to char, here is char mapping to string</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-290-Word-Pattern&quot;&gt;&lt;a href=&quot;#Question-290-Word-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Question: 290. Word Pattern&quot;&gt;&lt;/a&gt;Question: 290. Word Pattern&lt;/h3&gt;&lt;p&gt;Given a pattern and a string str, find if str follows the same pattern.&lt;/p&gt;
&lt;p&gt;Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.&lt;/p&gt;
&lt;p&gt;Examples:&lt;br&gt;pattern = “abba”, str = “dog cat cat dog” should return true.&lt;br&gt;pattern = “abba”, str = “dog cat cat fish” should return false.&lt;br&gt;pattern = “aaaa”, str = “dog cat cat dog” should return false.&lt;br&gt;pattern = “abba”, str = “dog dog dog dog” should return false.&lt;br&gt;Notes:&lt;br&gt;You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 299 Bulls and Cows</title>
    <link href="http://xytian315.github.io/2016/12/08/leetcode-299-Bulls-and-Cows/"/>
    <id>http://xytian315.github.io/2016/12/08/leetcode-299-Bulls-and-Cows/</id>
    <published>2016-12-09T06:42:54.000Z</published>
    <updated>2016-12-10T07:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-299-Bulls-and-Cows"><a href="#Question-299-Bulls-and-Cows" class="headerlink" title="Question: 299. Bulls and Cows"></a>Question: 299. Bulls and Cows</h3><p>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p>
<p>For example:</p>
<p>Secret number:  “1807”<br>Friend’s guess: “7810”<br>Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)<br>Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return “1A3B”.</p>
<p>Please note that both secret number and friend’s guess may contain duplicate digits, for example:</p>
<p>Secret number:  “1123”<br>Friend’s guess: “0111”<br>In this case, the 1st 1 in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return “1A1B”.<br>You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//solution from discussion</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> bulls=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cows=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;secret.length();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s = Character.getNumericValue(secret.charAt(i));</span><br><span class="line">            <span class="keyword">int</span> g = Character.getNumericValue(guess.charAt(i));</span><br><span class="line">            <span class="keyword">if</span>(s==g)&#123;</span><br><span class="line">                bulls++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(numbers[s]&lt;<span class="number">0</span>) cows++;</span><br><span class="line">                <span class="keyword">if</span>(numbers[g]&gt;<span class="number">0</span>) cows++;</span><br><span class="line">                numbers[s]++;</span><br><span class="line">                numbers[g]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bulls+<span class="string">"A"</span>+cows+<span class="string">"B"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my complicated solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bulls =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cows =<span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;secret.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(secret.charAt(i)==guess.charAt(i))&#123;</span><br><span class="line">                bulls++;</span><br><span class="line">                set.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Character s = secret.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(s)) &#123;</span><br><span class="line">                    map.put(s, map.get(s) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(s, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;guess.length();i++)&#123;</span><br><span class="line">            Character g = guess.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(g)&amp;&amp;!set.contains(i))&#123;</span><br><span class="line">                map.put(g,map.get(g)-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(g) &gt;=<span class="number">0</span>) cows++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(bulls);</span><br><span class="line">        sb.append(<span class="string">"A"</span>);</span><br><span class="line">        sb.append(cows);</span><br><span class="line">        sb.append(<span class="string">"B"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>The idea is to iterate over the numbers in secret and in guess and count all bulls right away. For cows maintain an array that stores count of the number appearances in secret and in guess. Increment cows when either number from secret was already seen in guest or vice versa.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-299-Bulls-and-Cows&quot;&gt;&lt;a href=&quot;#Question-299-Bulls-and-Cows&quot; class=&quot;headerlink&quot; title=&quot;Question: 299. Bulls and Cows&quot;&gt;&lt;/a&gt;Question: 299. Bulls and Cows&lt;/h3&gt;&lt;p&gt;You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Secret number:  “1807”&lt;br&gt;Friend’s guess: “7810”&lt;br&gt;Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)&lt;br&gt;Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return “1A3B”.&lt;/p&gt;
&lt;p&gt;Please note that both secret number and friend’s guess may contain duplicate digits, for example:&lt;/p&gt;
&lt;p&gt;Secret number:  “1123”&lt;br&gt;Friend’s guess: “0111”&lt;br&gt;In this case, the 1st 1 in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return “1A1B”.&lt;br&gt;You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 242 Valid Anagram</title>
    <link href="http://xytian315.github.io/2016/12/08/leetcode-242-Valid-Anagram/"/>
    <id>http://xytian315.github.io/2016/12/08/leetcode-242-Valid-Anagram/</id>
    <published>2016-12-09T05:35:06.000Z</published>
    <updated>2016-12-09T07:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-242-Valid-Anagram"><a href="#Question-242-Valid-Anagram" class="headerlink" title="Question: 242. Valid Anagram"></a>Question: 242. Valid Anagram</h3><p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>
<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>
<p>Note:<br>You may assume the string contains only lowercase alphabets.</p>
<p>Follow up:<br>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//use array</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] chars= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            chars[s.charAt(i)-<span class="string">'a'</span>]++;</span><br><span class="line">            chars[t.charAt(i)-<span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(element!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//use map</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(i)))&#123;</span><br><span class="line">                map.put(s.charAt(i), map.get(s.charAt(i))+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(s.charAt(i),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(t.charAt(i)) &amp;&amp; (map.get(t.charAt(i))&gt;<span class="number">0</span>)) &#123;</span><br><span class="line">                map.put(t.charAt(i),map.get(t.charAt(i))-<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my solution</span></span><br><span class="line"><span class="comment">//the strings only include 26 english letter, I don't need to use ASCII 256 length</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] chars = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span>[] chart = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">            chars[i]=chart[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            chars[s.charAt(i)]=chars[s.charAt(i)]+<span class="number">1</span>;</span><br><span class="line">            chart[t.charAt(i)]=chart[t.charAt(i)]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chars[i]!=chart[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>We can use a map or an array to keep tracking,<br>the total number for the same character should be the same. the difference of the number should be 0.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-242-Valid-Anagram&quot;&gt;&lt;a href=&quot;#Question-242-Valid-Anagram&quot; class=&quot;headerlink&quot; title=&quot;Question: 242. Valid Anagram&quot;&gt;&lt;/a&gt;Question: 242. Valid Anagram&lt;/h3&gt;&lt;p&gt;Given two strings s and t, write a function to determine if t is an anagram of s.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;s = “anagram”, t = “nagaram”, return true.&lt;br&gt;s = “rat”, t = “car”, return false.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;You may assume the string contains only lowercase alphabets.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;What if the inputs contain unicode characters? How would you adapt your solution to such case?&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 205 Isomorphic strings</title>
    <link href="http://xytian315.github.io/2016/12/08/leetcode-205-Isomorphic-strings/"/>
    <id>http://xytian315.github.io/2016/12/08/leetcode-205-Isomorphic-strings/</id>
    <published>2016-12-09T03:56:50.000Z</published>
    <updated>2016-12-09T04:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-205-Isomorphic-Strings"><a href="#Question-205-Isomorphic-Strings" class="headerlink" title="Question: 205. Isomorphic Strings"></a>Question: 205. Isomorphic Strings</h3><p>Given two strings s and t, determine if they are isomorphic.</p>
<p>Two strings are isomorphic if the characters in s can be replaced to get t.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(s.charAt(i))!=t.charAt(i))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsValue((t.charAt(i))))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(s.charAt(i), t.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>Keywords: No two characters may map to the same character.<br>define a map which tracks the char-char mappings. If a value is already mapped, it can not be mapped again.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-205-Isomorphic-Strings&quot;&gt;&lt;a href=&quot;#Question-205-Isomorphic-Strings&quot; class=&quot;headerlink&quot; title=&quot;Question: 205. Isomorphic Strings&quot;&gt;&lt;/a&gt;Question: 205. Isomorphic Strings&lt;/h3&gt;&lt;p&gt;Given two strings s and t, determine if they are isomorphic.&lt;/p&gt;
&lt;p&gt;Two strings are isomorphic if the characters in s can be replaced to get t.&lt;/p&gt;
&lt;p&gt;All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 204 count primes</title>
    <link href="http://xytian315.github.io/2016/12/07/leetcode-204-count-primes/"/>
    <id>http://xytian315.github.io/2016/12/07/leetcode-204-count-primes/</id>
    <published>2016-12-08T03:13:02.000Z</published>
    <updated>2016-12-08T03:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-204-Count-Primes"><a href="#Question-204-Count-Primes" class="headerlink" title="Question: 204. Count Primes"></a>Question: 204. Count Primes</h3><p>Description:<br>Count the number of prime numbers less than a non-negative number, n.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{
        <span class="keyword">boolean</span>[] notPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];
        <span class="keyword">int</span> count=<span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++){
            <span class="keyword">if</span>(notPrime[i]==<span class="keyword">false</span>){
                count++;
                <span class="keyword">int</span> j=<span class="number">2</span>;
                <span class="keyword">while</span>(i*j&lt;=n-<span class="number">1</span>){
                    notPrime[i*j]=<span class="keyword">true</span>;
                    j++;
                }
            }
        }
        <span class="keyword">return</span> count;
    }
}
</code></pre>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts:"></a>Thoughts:</h3><p>use boolean array to record if it is prime or not<br>the initial value of boolean is false</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-204-Count-Primes&quot;&gt;&lt;a href=&quot;#Question-204-Count-Primes&quot; class=&quot;headerlink&quot; title=&quot;Question: 204. Count Primes&quot;&gt;&lt;/a&gt;Question: 204. Count Primes&lt;/h3&gt;&lt;p&gt;Description:&lt;br&gt;Count the number of prime numbers less than a non-negative number, n.&lt;br&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 202 Happy number</title>
    <link href="http://xytian315.github.io/2016/12/06/leetcode-202-Happy-number/"/>
    <id>http://xytian315.github.io/2016/12/06/leetcode-202-Happy-number/</id>
    <published>2016-12-07T06:43:35.000Z</published>
    <updated>2016-12-07T06:47:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-202-Happy-Number"><a href="#Question-202-Happy-Number" class="headerlink" title="Question: 202. Happy Number"></a>Question: 202. Happy Number</h3><p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Example: 19 is a happy number</p>
<p>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(set.add(n))&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                sum +=(n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">                n=n/<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            n=sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><ol>
<li>Endless cycle is the hint for using the set to track the numbers since if it is endless cycle, it must return the same number again.</li>
<li>Use a while loop to keep summing the numbers</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-202-Happy-Number&quot;&gt;&lt;a href=&quot;#Question-202-Happy-Number&quot; class=&quot;headerlink&quot; title=&quot;Question: 202. Happy Number&quot;&gt;&lt;/a&gt;Question: 202. Happy Number&lt;/h3&gt;&lt;p&gt;Write an algorithm to determine if a number is “happy”.&lt;/p&gt;
&lt;p&gt;A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.&lt;/p&gt;
&lt;p&gt;Example: 19 is a happy number&lt;/p&gt;
&lt;p&gt;12 + 92 = 82&lt;br&gt;82 + 22 = 68&lt;br&gt;62 + 82 = 100&lt;br&gt;12 + 02 + 02 = 1&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 136 Single number</title>
    <link href="http://xytian315.github.io/2016/12/06/leetcode-136-Single-number/"/>
    <id>http://xytian315.github.io/2016/12/06/leetcode-136-Single-number/</id>
    <published>2016-12-07T05:18:33.000Z</published>
    <updated>2016-12-07T06:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-136-Single-Number"><a href="#Question-136-Single-Number" class="headerlink" title="Question: 136. Single Number"></a>Question: 136. Single Number</h3><p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//the solution from discussion</span></span><br><span class="line"><span class="comment">//O(n) time 0 extra space</span></span><br><span class="line"><span class="comment">//A XOR A = 0 and the XOR operator is commutative</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            result=result^nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysolution1 O(n) time O(n) extra space</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.add(element))&#123;</span><br><span class="line">                set.remove(element);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] result =set.toArray()</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysolution2 O(n) time O(n) extra space</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(element))&#123;</span><br><span class="line">                map.put(element,map.get(element)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(element,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(element)==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> element;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>if without extra space, thinking about bit manipulation?<br>XOR bitwise manipulation A XOR A = 0; A XOR A XOR B = B;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-136-Single-Number&quot;&gt;&lt;a href=&quot;#Question-136-Single-Number&quot; class=&quot;headerlink&quot; title=&quot;Question: 136. Single Number&quot;&gt;&lt;/a&gt;Question: 136. Single Number&lt;/h3&gt;&lt;p&gt;Given an array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 36 valid sudoku</title>
    <link href="http://xytian315.github.io/2016/12/06/leetcode-36-valid-sudoku/"/>
    <id>http://xytian315.github.io/2016/12/06/leetcode-36-valid-sudoku/</id>
    <published>2016-12-07T04:31:17.000Z</published>
    <updated>2016-12-07T04:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-36-Valid-Sudoku"><a href="#Question-36-Valid-Sudoku" class="headerlink" title="Question: 36. Valid Sudoku"></a>Question: 36. Valid Sudoku</h3><p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.</p>
<p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br>Note:<br>A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//validate rows</span></span><br><span class="line">            <span class="keyword">if</span> (!validate(i, i + <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//validate cols</span></span><br><span class="line">            <span class="keyword">if</span> (!validate(<span class="number">0</span>, <span class="number">9</span>, i, i + <span class="number">1</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//validate cells</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j += <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!validate(i, i + <span class="number">3</span>, j, j + <span class="number">3</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(<span class="keyword">int</span> rowStart, <span class="keyword">int</span> rowEnd, <span class="keyword">int</span> colStart, <span class="keyword">int</span> colEnd, <span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = rowStart; i &lt; rowEnd; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = colStart; j &lt; colEnd; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!set.add(board[i][j]) &amp;&amp; board[i][j] != <span class="string">'.'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my first time solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//validate rows</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validate(i, i + <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//validate columns</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validate(<span class="number">0</span>, <span class="number">9</span>, i, i + <span class="number">1</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//validate cells</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j += <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!validate(i, i + <span class="number">3</span>, j, j + <span class="number">3</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(<span class="keyword">int</span> rowStart, <span class="keyword">int</span> rowEnd, <span class="keyword">int</span> colStart, <span class="keyword">int</span> colEnd, <span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = rowStart; i &lt; rowEnd; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = colStart; j &lt; colEnd; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!set.add(board[i][j]) &amp;&amp; board[i][j] != <span class="string">'.'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><ol>
<li>Soduku will be always 9rows 9 columns I don’t need to get the length like this board.length</li>
<li>always checking if we can refactor it. make it DRY</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-36-Valid-Sudoku&quot;&gt;&lt;a href=&quot;#Question-36-Valid-Sudoku&quot; class=&quot;headerlink&quot; title=&quot;Question: 36. Valid Sudoku&quot;&gt;&lt;/a&gt;Question: 36. Valid Sudoku&lt;/h3&gt;&lt;p&gt;Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.&lt;/p&gt;
&lt;p&gt;The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.&lt;br&gt;Note:&lt;br&gt;A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 414 Third Maximum number</title>
    <link href="http://xytian315.github.io/2016/12/05/leetcode-414-Third-Maximum-number/"/>
    <id>http://xytian315.github.io/2016/12/05/leetcode-414-Third-Maximum-number/</id>
    <published>2016-12-06T05:55:27.000Z</published>
    <updated>2016-12-06T05:58:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-414-Third-Maximum-Number"><a href="#Question-414-Third-Maximum-Number" class="headerlink" title="Question: 414. Third Maximum Number"></a>Question: 414. Third Maximum Number</h3><p>Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p>
<p>Example 1:<br>Input: [3, 2, 1]</p>
<p>Output: 1</p>
<p>Explanation: The third maximum is 1.<br>Example 2:<br>Input: [1, 2]</p>
<p>Output: 2</p>
<p>Explanation: The third maximum does not exist, so the maximum (2) is returned instead.<br>Example 3:<br>Input: [2, 2, 3, 1]</p>
<p>Output: 1</p>
<p>Explanation: Note that the third maximum here means the third maximum distinct number.<br>Both numbers with value 2 are both considered as second maximum.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> max = Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">long</span> mid = Long.MIN_VALUE;;</span><br><span class="line">        <span class="keyword">long</span> min = Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;max)&#123;</span><br><span class="line">                min=mid;</span><br><span class="line">                mid=max;</span><br><span class="line">                max=i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;max &amp;&amp; i&gt;mid)&#123;</span><br><span class="line">                min=mid;</span><br><span class="line">                mid=i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;min &amp;&amp; i&lt;mid)&#123;</span><br><span class="line">                min=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min!=Long.MIN_VALUE)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)min;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)max;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>should use long to initiate min value</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-414-Third-Maximum-Number&quot;&gt;&lt;a href=&quot;#Question-414-Third-Maximum-Number&quot; class=&quot;headerlink&quot; title=&quot;Question: 414. Third Maximum Number&quot;&gt;&lt;/a&gt;Question: 414. Third Maximum Number&lt;/h3&gt;&lt;p&gt;Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;Input: [3, 2, 1]&lt;/p&gt;
&lt;p&gt;Output: 1&lt;/p&gt;
&lt;p&gt;Explanation: The third maximum is 1.&lt;br&gt;Example 2:&lt;br&gt;Input: [1, 2]&lt;/p&gt;
&lt;p&gt;Output: 2&lt;/p&gt;
&lt;p&gt;Explanation: The third maximum does not exist, so the maximum (2) is returned instead.&lt;br&gt;Example 3:&lt;br&gt;Input: [2, 2, 3, 1]&lt;/p&gt;
&lt;p&gt;Output: 1&lt;/p&gt;
&lt;p&gt;Explanation: Note that the third maximum here means the third maximum distinct number.&lt;br&gt;Both numbers with value 2 are both considered as second maximum.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 88 Merge sorted array</title>
    <link href="http://xytian315.github.io/2016/12/05/leetcode-88-merge-sorted-array-0/"/>
    <id>http://xytian315.github.io/2016/12/05/leetcode-88-merge-sorted-array-0/</id>
    <published>2016-12-06T00:37:50.000Z</published>
    <updated>2016-12-06T05:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-88-Merge-Sorted-Array"><a href="#Question-88-Merge-Sorted-Array" class="headerlink" title="Question: 88. Merge Sorted Array"></a>Question: 88. Merge Sorted Array</h3><p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>
<p>Note:<br>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//not good solution did by myself</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] temp = nums1.clone();</span><br><span class="line">        <span class="keyword">while</span>(start1&lt;m &amp;&amp; start2&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[start1]&lt;=nums2[start2])&#123;</span><br><span class="line">                nums1[start]=temp[start1];</span><br><span class="line">                start1++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums1[start]=nums2[start2];</span><br><span class="line">                start2++;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start1!=m)&#123;</span><br><span class="line">            <span class="keyword">while</span>(start1&lt;m)&#123;</span><br><span class="line">                nums1[start]=temp[start1];</span><br><span class="line">                start1++;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start2!=n)&#123;</span><br><span class="line">            <span class="keyword">while</span>(start2&lt;n)&#123;</span><br><span class="line">                nums1[start]=nums2[start2];</span><br><span class="line">                start2++;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//better solution after reading the discussion</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = m+n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i]&gt;=nums2[j])&#123;</span><br><span class="line">                nums1[index]=nums1[i];</span><br><span class="line">                i--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums1[index]=nums2[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            nums1[index]=nums2[j];</span><br><span class="line">            j--;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>when doing things in place in array, thinking about starting backwords.<br>also noted after comparing two array, we only need to check if nums2 is already finished do not need to check nums1 since nums1’s elements are already in the right place</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-88-Merge-Sorted-Array&quot;&gt;&lt;a href=&quot;#Question-88-Merge-Sorted-Array&quot; class=&quot;headerlink&quot; title=&quot;Question: 88. Merge Sorted Array&quot;&gt;&lt;/a&gt;Question: 88. Merge Sorted Array&lt;/h3&gt;&lt;p&gt;Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 27 remove element</title>
    <link href="http://xytian315.github.io/2016/12/04/leetcode-27-remove-element-0/"/>
    <id>http://xytian315.github.io/2016/12/04/leetcode-27-remove-element-0/</id>
    <published>2016-12-04T20:28:35.000Z</published>
    <updated>2016-12-06T05:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-27-Remove-Element"><a href="#Question-27-Remove-Element" class="headerlink" title="Question: 27. Remove Element"></a>Question: 27. Remove Element</h3><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p>Example:<br>Given input array nums = [3,2,2,3], val = 3</p>
<p>Your function should return length = 2, with the first two elements of nums being 2.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">//my solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>{
        <span class="keyword">int</span> current =<span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length;i++){
            <span class="keyword">if</span>(nums[i]!=val){
                nums[current]=nums[i];
                current++;
            }
        }
        <span class="keyword">return</span> current;
    }
}
</code></pre>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>return current not (current+1)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-27-Remove-Element&quot;&gt;&lt;a href=&quot;#Question-27-Remove-Element&quot; class=&quot;headerlink&quot; title=&quot;Question: 27. Remove Element&quot;&gt;&lt;/a&gt;Question: 27. Remove Element&lt;/h3&gt;&lt;p&gt;Given an array and a value, remove all instances of that value in place and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this in place with constant memory.&lt;/p&gt;
&lt;p&gt;The order of elements can be changed. It doesn’t matter what you leave beyond the new length.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given input array nums = [3,2,2,3], val = 3&lt;/p&gt;
&lt;p&gt;Your function should return length = 2, with the first two elements of nums being 2.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 1 two sum</title>
    <link href="http://xytian315.github.io/2016/12/04/leetcode-1-two-sum/"/>
    <id>http://xytian315.github.io/2016/12/04/leetcode-1-two-sum/</id>
    <published>2016-12-04T20:11:31.000Z</published>
    <updated>2016-12-07T05:33:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1-Two-Sum"><a href="#Question-1-Two-Sum" class="headerlink" title="Question: 1. Two Sum"></a>Question: 1. Two Sum</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>Example:<br>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target-nums[i]))&#123;</span><br><span class="line">                result[<span class="number">0</span>]=map.get(target-nums[i]);</span><br><span class="line">                result[<span class="number">1</span>]=i;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-1-Two-Sum&quot;&gt;&lt;a href=&quot;#Question-1-Two-Sum&quot; class=&quot;headerlink&quot; title=&quot;Question: 1. Two Sum&quot;&gt;&lt;/a&gt;Question: 1. Two Sum&lt;/h3&gt;&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums = [2, 7, 11, 15], target = 9,&lt;/p&gt;
&lt;p&gt;Because nums[0] + nums[1] = 2 + 7 = 9,&lt;br&gt;return [0, 1].&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 219 contains duplicate II</title>
    <link href="http://xytian315.github.io/2016/12/04/leetcode-219-contains-duplicate-II/"/>
    <id>http://xytian315.github.io/2016/12/04/leetcode-219-contains-duplicate-II/</id>
    <published>2016-12-04T18:17:25.000Z</published>
    <updated>2016-12-09T04:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-219-Contains-Duplicate-II"><a href="#Question-219-Contains-Duplicate-II" class="headerlink" title="Question: 219. Contains Duplicate II"></a>Question: 219. Contains Duplicate II</h3><p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution use a hashmap</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;=<span class="number">1</span> || k&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(nums[i]) &amp;&amp; (i-map.get(nums[i])&lt;=k))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//better solution you can use hashset </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; k) set.remove(nums[i-k-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(!set.add(nums[i])) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-219-Contains-Duplicate-II&quot;&gt;&lt;a href=&quot;#Question-219-Contains-Duplicate-II&quot; class=&quot;headerlink&quot; title=&quot;Question: 219. Contains Duplicate II&quot;&gt;&lt;/a&gt;Question: 219. Contains Duplicate II&lt;/h3&gt;&lt;p&gt;Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 217 contains duplicate</title>
    <link href="http://xytian315.github.io/2016/12/03/leetcode-217-contains-duplicate/"/>
    <id>http://xytian315.github.io/2016/12/03/leetcode-217-contains-duplicate/</id>
    <published>2016-12-03T23:21:20.000Z</published>
    <updated>2016-12-09T04:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-217-Contains-Duplicate"><a href="#Question-217-Contains-Duplicate" class="headerlink" title="Question: 217. Contains Duplicate"></a>Question: 217. Contains Duplicate</h3><p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//time O(n) space O(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-217-Contains-Duplicate&quot;&gt;&lt;a href=&quot;#Question-217-Contains-Duplicate&quot; class=&quot;headerlink&quot; title=&quot;Question: 217. Contains Duplicate&quot;&gt;&lt;/a&gt;Question: 217. Contains Duplicate&lt;/h3&gt;&lt;p&gt;Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
</feed>
