<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kristy&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xytian315.github.io/"/>
  <updated>2017-02-03T07:22:18.000Z</updated>
  <id>http://xytian315.github.io/</id>
  
  <author>
    <name>Kristy Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 67 Add Binary</title>
    <link href="http://xytian315.github.io/2017/02/02/leetcode-67-Add-Binary/"/>
    <id>http://xytian315.github.io/2017/02/02/leetcode-67-Add-Binary/</id>
    <published>2017-02-03T07:15:14.000Z</published>
    <updated>2017-02-03T07:22:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-67-Add-Binary"><a href="#Question-67-Add-Binary" class="headerlink" title="Question: 67. Add Binary"></a>Question: 67. Add Binary</h3><p>Given two binary strings, return their sum (also a binary string).</p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=a.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=b.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        StringBuilder sb= <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=carry;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">0</span>)</span><br><span class="line">                temp+=a.charAt(i--)-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">0</span>)</span><br><span class="line">                temp+=b.charAt(j--)-<span class="string">'0'</span>;</span><br><span class="line">            sb.append(temp%<span class="number">2</span>);</span><br><span class="line">            carry=temp/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry!=<span class="number">0</span>)</span><br><span class="line">            sb.append(carry);</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>use StringBuilder;<br>StringBuilder has reverse() method;<br>there could be 3 use ()%2 and ()/2 to calculate the value and carry</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-67-Add-Binary&quot;&gt;&lt;a href=&quot;#Question-67-Add-Binary&quot; class=&quot;headerlink&quot; title=&quot;Question: 67. Add Binary&quot;&gt;&lt;/a&gt;Question: 67. Add 
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 13 Roman to Integer</title>
    <link href="http://xytian315.github.io/2017/01/31/leetcode-13-Roman-to-Integer/"/>
    <id>http://xytian315.github.io/2017/01/31/leetcode-13-Roman-to-Integer/</id>
    <published>2017-02-01T06:37:53.000Z</published>
    <updated>2017-02-01T07:09:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-13-Roman-to-Integer"><a href="#Question-13-Roman-to-Integer" class="headerlink" title="Question: 13. Roman to Integer"></a>Question: 13. Roman to Integer</h3><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my first time solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line">        map.put(<span class="string">'I'</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">'V'</span>,<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">'X'</span>,<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">'L'</span>,<span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">'C'</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">'D'</span>,<span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">'M'</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index&lt;=s.length()-<span class="number">2</span>)&#123;</span><br><span class="line">            Character c1 = s.charAt(index);</span><br><span class="line">            Character c2 = s.charAt(index+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> value1 = map.get(c1);</span><br><span class="line">            <span class="keyword">int</span> value2 = map.get(c2);</span><br><span class="line">            <span class="keyword">if</span>(value1&gt;=value2)&#123;</span><br><span class="line">                result+=value1;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result+=value2-value1;</span><br><span class="line">                index+=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index==s.length()-<span class="number">1</span>)</span><br><span class="line">            result+=map.get(s.charAt(index));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//refactor a little bit, MMXIV = M+M+X-I+V I was thinking "M+M+X+(V-I)" :(</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line">        map.put(<span class="string">'I'</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">'V'</span>,<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">'X'</span>,<span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">'L'</span>,<span class="number">50</span>);</span><br><span class="line">        map.put(<span class="string">'C'</span>,<span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">'D'</span>,<span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">'M'</span>,<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index&lt;=s.length()-<span class="number">2</span>)&#123;</span><br><span class="line">            Character c1 = s.charAt(index);</span><br><span class="line">            Character c2 = s.charAt(index+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> value1 = map.get(c1);</span><br><span class="line">            <span class="keyword">int</span> value2 = map.get(c2);</span><br><span class="line">            <span class="keyword">if</span>(value1&gt;=value2)&#123;</span><br><span class="line">                result+=value1;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                result-=value1;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        result+=map.get(s.charAt(index));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>besides map, we could also put into an array</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-13-Roman-to-Integer&quot;&gt;&lt;a href=&quot;#Question-13-Roman-to-Integer&quot; class=&quot;headerlink&quot; title=&quot;Question: 13. Roman to Integer&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 9 Palindrome Number</title>
    <link href="http://xytian315.github.io/2017/01/31/leetcode-9-Palindrome-Number/"/>
    <id>http://xytian315.github.io/2017/01/31/leetcode-9-Palindrome-Number/</id>
    <published>2017-01-31T08:01:38.000Z</published>
    <updated>2017-01-31T08:18:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h3><ol>
<li>Palindrome Number<br>Determine whether an integer is a palindrome. Do this without extra space.</li>
</ol>
<p>Some hints:<br>Could negative integers be palindromes? (ie, -1)</p>
<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>
<p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>
<p>There is a more generic way of solving this problem.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">//my solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{
        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="comment">//find the length</span>
        <span class="keyword">int</span> temp = x;
        <span class="keyword">int</span> length=<span class="number">0</span>;
        <span class="keyword">while</span>(temp!=<span class="number">0</span>){
            temp=temp/<span class="number">10</span>;
            length++;
        }
        <span class="comment">// calculate the middle number</span>
        <span class="keyword">int</span> middle = length%<span class="number">2</span> !=<span class="number">0</span> ? length/<span class="number">2</span>+<span class="number">1</span> : length/<span class="number">2</span>;
        <span class="comment">//first half</span>
        <span class="keyword">int</span> front=x;
        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt;=middle;i++){
            front=front/<span class="number">10</span>;
        }
        <span class="comment">//second half and reverse</span>
        <span class="keyword">int</span> value=x;
        <span class="keyword">int</span> back=<span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length-middle;i++){
            <span class="keyword">int</span> tail = value%<span class="number">10</span>;
            back=back*<span class="number">10</span>+tail;
            value=value/<span class="number">10</span>;
        }
        <span class="keyword">return</span> front==back;

    }
}

<span class="comment">//smarter solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{
        <span class="keyword">if</span> (x&lt;<span class="number">0</span> || (x!=<span class="number">0</span> &amp;&amp; x%<span class="number">10</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="keyword">int</span> rev = <span class="number">0</span>;
        <span class="keyword">while</span> (x&gt;rev){
          rev = rev*<span class="number">10</span> + x%<span class="number">10</span>;
          x = x/<span class="number">10</span>;
        }
        <span class="keyword">return</span> (x==rev || x==rev/<span class="number">10</span>);
    }
}
</code></pre>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Negative number is not palindrome. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Palindrome Number&lt;br&gt;Determine whether
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 237 Delete Node in a Linked List</title>
    <link href="http://xytian315.github.io/2017/01/29/leetcode-237-Delete-Node-in-a-Linked-List/"/>
    <id>http://xytian315.github.io/2017/01/29/leetcode-237-Delete-Node-in-a-Linked-List/</id>
    <published>2017-01-30T02:11:13.000Z</published>
    <updated>2017-01-30T02:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-237-Delete-Node-in-a-Linked-List"><a href="#Question-237-Delete-Node-in-a-Linked-List" class="headerlink" title="Question: 237. Delete Node in a Linked List"></a>Question: 237. Delete Node in a Linked List</h3><p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">        node.val=node.next.val;</span><br><span class="line">        node.next=node.next.next;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-237-Delete-Node-in-a-Linked-List&quot;&gt;&lt;a href=&quot;#Question-237-Delete-Node-in-a-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Question: 
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 234 Palindrome Linked List</title>
    <link href="http://xytian315.github.io/2017/01/28/leetcode-234-Palindrome-Linked-List/"/>
    <id>http://xytian315.github.io/2017/01/28/leetcode-234-Palindrome-Linked-List/</id>
    <published>2017-01-28T21:44:51.000Z</published>
    <updated>2017-01-29T06:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-234-Palindrome-Linked-List"><a href="#Question-234-Palindrome-Linked-List" class="headerlink" title="Question: 234. Palindrome Linked List"></a>Question: 234. Palindrome Linked List</h3><p>Given a singly linked list, determine if it is a palindrome.<br>Follow up:<br>Could you do it in O(n) time and O(1) space?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//calculate the length of the node</span></span><br><span class="line">        <span class="keyword">int</span> length=<span class="number">0</span>;</span><br><span class="line">        ListNode temp = head;</span><br><span class="line">        <span class="keyword">while</span>(temp!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            temp=temp.next;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//find the middle of the ListNode</span></span><br><span class="line">        ListNode middle=head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;=length/<span class="number">2</span>-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            middle=middle.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length%<span class="number">2</span>!=<span class="number">0</span>)</span><br><span class="line">            middle=middle.next;</span><br><span class="line">        <span class="comment">//reverse the second half of the listNode</span></span><br><span class="line">        ListNode newMiddle=reverse(middle);</span><br><span class="line">        <span class="comment">//compare first half and reversed harlf of the listNode</span></span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span> &amp;&amp; newMiddle!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.val!=newMiddle.val)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            head=head.next;</span><br><span class="line">            newMiddle=newMiddle.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span> || node.next==<span class="keyword">null</span>) <span class="keyword">return</span> node;</span><br><span class="line">        ListNode temp = node.next;</span><br><span class="line">        ListNode newHead=reverse(temp);</span><br><span class="line">        temp.next=node;</span><br><span class="line">        node.next=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//refactor a little bit, we don't need to get the length to find the middle of the ListNode,</span></span><br><span class="line"><span class="comment">//we can just use the two pointers to find the middle of the ListNode;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//find the middle of the ListNode;</span></span><br><span class="line">        <span class="comment">//use two pointers one move one step, the other one move two steps</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">            fast=fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//odd numbers move one more into the other half</span></span><br><span class="line">        <span class="keyword">if</span>(fast!=<span class="keyword">null</span>)</span><br><span class="line">            slow=slow.next;</span><br><span class="line">        <span class="comment">//reverse the second half of the listNode</span></span><br><span class="line">        ListNode newMiddle=reverse(slow);</span><br><span class="line">        <span class="comment">//compare first half and reversed harlf of the listNode</span></span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span> &amp;&amp; newMiddle!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head.val!=newMiddle.val)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            head=head.next;</span><br><span class="line">            newMiddle=newMiddle.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span> || node.next==<span class="keyword">null</span>) <span class="keyword">return</span> node;</span><br><span class="line">        ListNode temp = node.next;</span><br><span class="line">        ListNode newHead=reverse(temp);</span><br><span class="line">        temp.next=node;</span><br><span class="line">        node.next=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-234-Palindrome-Linked-List&quot;&gt;&lt;a href=&quot;#Question-234-Palindrome-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Question: 234. Palindr
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 206 Reverse Linked List</title>
    <link href="http://xytian315.github.io/2017/01/27/leetcode-206-Reverse-Linked-List/"/>
    <id>http://xytian315.github.io/2017/01/27/leetcode-206-Reverse-Linked-List/</id>
    <published>2017-01-28T05:44:33.000Z</published>
    <updated>2017-01-28T06:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-206-Reverse-Linked-List"><a href="#Question-206-Reverse-Linked-List" class="headerlink" title="Question: 206. Reverse Linked List"></a>Question: 206. Reverse Linked List</h3><p>Reverse a singly linked list.<br>recursive and iterative</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */</span>

<span class="comment">//my passed recursive solution </span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head==<span class="keyword">null</span>|| head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode node = head.next;
        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>){
            node=reverseList(node);
        }
        ListNode node2=node;
        <span class="keyword">while</span>(node2.next!=<span class="keyword">null</span>){
            node2=node2.next;
        }
        node2.next=head;
        head.next=<span class="keyword">null</span>;
        <span class="keyword">return</span> node;
    }
}
<span class="comment">//cleaner recursive solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head==<span class="keyword">null</span>|| head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode nodeNext = head.next;
        ListNode newHead = reverseList(nodeNext);
        nodeNext.next = head;
        head.next = <span class="keyword">null</span>;
        <span class="keyword">return</span> newHead;
    }
}

<span class="comment">//iterative solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head==<span class="keyword">null</span>|| head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode newHead = <span class="keyword">null</span>;
        <span class="keyword">while</span>(head!=<span class="keyword">null</span>){
            ListNode nodeNext = head.next;
            head.next=newHead;
            newHead=head;
            head=nodeNext;
        }
        <span class="keyword">return</span> newHead;
    }
}
</code></pre>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>recursive and iterative</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-206-Reverse-Linked-List&quot;&gt;&lt;a href=&quot;#Question-206-Reverse-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Question: 206. Reverse Linke
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 203 Remove Linked List Elements</title>
    <link href="http://xytian315.github.io/2017/01/27/leetcode-203-Remove-Linked-List-Elements/"/>
    <id>http://xytian315.github.io/2017/01/27/leetcode-203-Remove-Linked-List-Elements/</id>
    <published>2017-01-28T05:23:25.000Z</published>
    <updated>2017-01-28T05:39:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-203-Remove-Linked-List-Elements"><a href="#Question-203-Remove-Linked-List-Elements" class="headerlink" title="Question: 203. Remove Linked List Elements"></a>Question: 203. Remove Linked List Elements</h3><p>Remove all elements from a linked list of integers that have value val.</p>
<p>Example<br>Given: 1 –&gt; 2 –&gt; 6 –&gt; 3 –&gt; 4 –&gt; 5 –&gt; 6, val = 6<br>Return: 1 –&gt; 2 –&gt; 3 –&gt; 4 –&gt; 5</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//my one time pass solution haha:)</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">if</span>(head.val==val) <span class="keyword">return</span> removeElements(head.next,val);</span><br><span class="line">        head.next = removeElements(head.next,val);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//we can refactor a little bit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">return</span>  head.val == val ? head.next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>recursive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-203-Remove-Linked-List-Elements&quot;&gt;&lt;a href=&quot;#Question-203-Remove-Linked-List-Elements&quot; class=&quot;headerlink&quot; title=&quot;Question: 20
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 160 Intersection of Two Linked Lists</title>
    <link href="http://xytian315.github.io/2017/01/26/leetcode-160-Intersection-of-Two-Linked-Lists/"/>
    <id>http://xytian315.github.io/2017/01/26/leetcode-160-Intersection-of-Two-Linked-Lists/</id>
    <published>2017-01-27T05:23:55.000Z</published>
    <updated>2017-01-27T06:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-160-Intersection-of-Two-Linked-Lists"><a href="#Question-160-Intersection-of-Two-Linked-Lists" class="headerlink" title="Question: 160. Intersection of Two Linked Lists"></a>Question: 160. Intersection of Two Linked Lists</h3><p>Write a program to find the node at which the intersection of two singly linked lists begins.<br>For example, the following two linked lists:</p>
<p>A:          a1 → a2<br>                   ↘<br>                     c1 → c2 → c3<br>                   ↗<br>B:     b1 → b2 → b3<br>begin to intersect at node c1.</p>
<p>Notes:<br>If the two linked lists have no intersection at all, return null.<br>The linked lists must retain their original structure after the function returns.<br>You may assume there are no cycles anywhere in the entire linked structure.<br>Your code should preferably run in O(n) time and use only O(1) memory.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123;</span><br><span class="line"> *         val = x;</span><br><span class="line"> *         next = null;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//best solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(headA==<span class="keyword">null</span> || headB==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode a=headA;</span><br><span class="line">        ListNode b=headB;</span><br><span class="line">        <span class="keyword">while</span>(a!=b)&#123;</span><br><span class="line">            a= a==<span class="keyword">null</span> ? headB : a.next;</span><br><span class="line">            b= b==<span class="keyword">null</span> ? headA : b.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//another solution easy to understand</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1, Get the length of the two lists.</span></span><br><span class="line"><span class="comment">//2, Align them to the same start point.</span></span><br><span class="line"><span class="comment">//3, Move them together until finding the intersection point, or the end null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(headA==<span class="keyword">null</span> || headB==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> lengthA=length(headA);</span><br><span class="line">        <span class="keyword">int</span> lengthB=length(headB);</span><br><span class="line">        <span class="keyword">while</span>(lengthA&gt;lengthB)&#123;</span><br><span class="line">            headA=headA.next;</span><br><span class="line">            lengthA--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(lengthA&lt;lengthB)&#123;</span><br><span class="line">            headB=headB.next;</span><br><span class="line">            lengthB--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(headA!=headB)&#123;</span><br><span class="line">            headA=headA.next;</span><br><span class="line">            headB=headB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> headA;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">(ListNode node)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(node.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            node=node.next;</span><br><span class="line">            result++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p><a href="https://discuss.leetcode.com/topic/28067/java-solution-without-knowing-the-difference-in-len" target="_blank" rel="external">https://discuss.leetcode.com/topic/28067/java-solution-without-knowing-the-difference-in-len</a><br>We can use two iterations to do that. In the first iteration, we will reset the pointer of one linkedlist to the head of another linkedlist after it reaches the tail node. In the second iteration, we will move two pointers until they points to the same node. Our operations in first iteration will help us counteract the difference. So if two linkedlist intersects, the meeting point in second iteration must be the intersection point. If the two linked lists have no intersection at all, then the meeting pointer in second iteration must be the tail node of both lists, which is null</p>
<p> the two iterations will both run for listA.length + listB.length and will reach the intersection point at the same time after switching the pointer.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-160-Intersection-of-Two-Linked-Lists&quot;&gt;&lt;a href=&quot;#Question-160-Intersection-of-Two-Linked-Lists&quot; class=&quot;headerlink&quot; title=&quot;Qu
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 141 Linked List Cycle</title>
    <link href="http://xytian315.github.io/2017/01/25/Leetcode-141-Linked-List-Cycle/"/>
    <id>http://xytian315.github.io/2017/01/25/Leetcode-141-Linked-List-Cycle/</id>
    <published>2017-01-26T05:57:17.000Z</published>
    <updated>2017-01-26T06:26:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-141-Linked-List-Cycle"><a href="#Question-141-Linked-List-Cycle" class="headerlink" title="Question: 141. Linked List Cycle"></a>Question: 141. Linked List Cycle</h3><p>Given a linked list, determine if it has a cycle in it.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my first time solution</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123;</span><br><span class="line"> *         val = x;</span><br><span class="line"> *         next = null;</span><br><span class="line"> *     &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Set&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.add(head))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             head=head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//better solution!</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        ListNode walker = head;</span><br><span class="line">        ListNode runner = head;</span><br><span class="line">        <span class="keyword">while</span>(runner.next!=<span class="keyword">null</span>&amp;&amp; runner.next.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            walker = walker.next;</span><br><span class="line">            runner = runner.next.next;</span><br><span class="line">            <span class="keyword">if</span>(walker == runner)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p>Floyd’s cycle-finding algorithm, also know as tortoise and hare algorithm. The idea is to have two pointers to the list and move them at different speeds. Move one forward by 1 node and the other by 2 nodes. If the linked list has a loop they will definitely meet.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-141-Linked-List-Cycle&quot;&gt;&lt;a href=&quot;#Question-141-Linked-List-Cycle&quot; class=&quot;headerlink&quot; title=&quot;Question: 141. Linked List Cycle
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 83 Removed duplicates from sorted list</title>
    <link href="http://xytian315.github.io/2017/01/24/leetcode-83-Removed-duplicates-from-sorted-list/"/>
    <id>http://xytian315.github.io/2017/01/24/leetcode-83-Removed-duplicates-from-sorted-list/</id>
    <published>2017-01-25T02:44:58.000Z</published>
    <updated>2017-01-25T05:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-83-Remove-Duplicates-from-Sorted-List"><a href="#Question-83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="Question: 83. Remove Duplicates from Sorted List"></a>Question: 83. Remove Duplicates from Sorted List</h3><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p>For example,<br>Given 1-&gt;1-&gt;2, return 1-&gt;2.<br>Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">//my first time solution</span>
<span class="comment">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode slow = head;
        ListNode fast = head.next;
        <span class="keyword">int</span> temp=slow.val;
        <span class="keyword">while</span>(slow!=<span class="keyword">null</span>&amp;&amp;fast!=<span class="keyword">null</span>){
           <span class="keyword">while</span>(fast.val==temp&amp;&amp;fast.next!=<span class="keyword">null</span>)
                fast=fast.next;
            <span class="keyword">if</span>(fast.val==temp){
                slow.next=<span class="keyword">null</span>;
                <span class="keyword">break</span>;
            }
            slow.next=fast;
            slow=slow.next;
            fast=fast.next;
            temp=slow.val;
        }
        <span class="keyword">return</span> head;

    }
}

<span class="comment">//better solution</span>

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        head.next=deleteDuplicates(head.next);
        <span class="keyword">return</span> head.val==head.next.val ? head.next : head;
    }
}
</code></pre>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Recursive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-83-Remove-Duplicates-from-Sorted-List&quot;&gt;&lt;a href=&quot;#Question-83-Remove-Duplicates-from-Sorted-List&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 24 Swap Nodes in Pairs</title>
    <link href="http://xytian315.github.io/2017/01/23/leetcode-24-Swap-Nodes-in-Pairs/"/>
    <id>http://xytian315.github.io/2017/01/23/leetcode-24-Swap-Nodes-in-Pairs/</id>
    <published>2017-01-24T04:02:49.000Z</published>
    <updated>2017-01-24T04:06:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-24-Swap-Nodes-in-Pairs"><a href="#Question-24-Swap-Nodes-in-Pairs" class="headerlink" title="Question: 24. Swap Nodes in Pairs"></a>Question: 24. Swap Nodes in Pairs</h3><p>Given a linked list, swap every two adjacent nodes and return its head.</p>
<p>For example,<br>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p>
<p>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my first time solution</span></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">      ListNode current = head;</span><br><span class="line">      <span class="keyword">if</span>(current == <span class="keyword">null</span> || current.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> current;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          ListNode temp1=current;</span><br><span class="line">          ListNode temp2=current.next;</span><br><span class="line">          ListNode temp3;</span><br><span class="line">          <span class="keyword">if</span>(temp2.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            temp3=temp2.next;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span>&#123;</span><br><span class="line">            temp3=<span class="keyword">null</span>;</span><br><span class="line">          &#125;</span><br><span class="line">         current=temp2;</span><br><span class="line">         temp2.next=temp1;</span><br><span class="line">         <span class="keyword">if</span>(temp3==<span class="keyword">null</span>)&#123;</span><br><span class="line">             temp1.next=<span class="keyword">null</span>;</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             temp1.next=swapPairs(temp3);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//better solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next==<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> head;</span><br><span class="line">      &#125;</span><br><span class="line">      ListNode temp = head.next;</span><br><span class="line">      head.next=swapPairs(head.next.next);</span><br><span class="line">      temp.next=head;</span><br><span class="line">      <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>recursive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-24-Swap-Nodes-in-Pairs&quot;&gt;&lt;a href=&quot;#Question-24-Swap-Nodes-in-Pairs&quot; class=&quot;headerlink&quot; title=&quot;Question: 24. Swap Nodes in Pa
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 21 Merged two sortd list</title>
    <link href="http://xytian315.github.io/2017/01/22/leetcode-21-Merged-two-sortd-list/"/>
    <id>http://xytian315.github.io/2017/01/22/leetcode-21-Merged-two-sortd-list/</id>
    <published>2017-01-23T05:06:48.000Z</published>
    <updated>2017-01-23T06:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-21-Merge-Two-Sorted-Lists"><a href="#Question-21-Merge-Two-Sorted-Lists" class="headerlink" title="Question: 21. Merge Two Sorted Lists"></a>Question: 21. Merge Two Sorted Lists</h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{
        <span class="keyword">if</span>(l1==<span class="keyword">null</span>) <span class="keyword">return</span> l2;
        <span class="keyword">if</span>(l2==<span class="keyword">null</span>) <span class="keyword">return</span> l1;
        <span class="keyword">if</span>(l1.val&lt;l2.val){
            l1.next=mergeTwoLists(l1.next, l2);
            <span class="keyword">return</span> l1;
        }<span class="keyword">else</span>{
            l2.next=mergeTwoLists(l2.next,l1);
            <span class="keyword">return</span> l2;
        }

    }
}
</code></pre>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Recursive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-21-Merge-Two-Sorted-Lists&quot;&gt;&lt;a href=&quot;#Question-21-Merge-Two-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;Question: 21. Merge Two 
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 19 Remove nth node from end of list</title>
    <link href="http://xytian315.github.io/2017/01/21/leetcode-19-Remove-nth-node-from-end-of-list/"/>
    <id>http://xytian315.github.io/2017/01/21/leetcode-19-Remove-nth-node-from-end-of-list/</id>
    <published>2017-01-22T02:57:37.000Z</published>
    <updated>2017-01-22T03:48:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-19-Remove-Nth-Node-From-End-of-List"><a href="#Question-19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="Question: 19. Remove Nth Node From End of List"></a>Question: 19. Remove Nth Node From End of List</h3><p>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example,</p>
<p>   Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>
<p>   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.<br>Note:<br>Given n will always be valid.<br>Try to do this in one pass.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Definition for singly-linked list.</span><br><span class="line"> * public class ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     ListNode next;</span><br><span class="line"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//use two pointers one slow, one fast</span></span><br><span class="line">        ListNode start = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode slow = start;</span><br><span class="line">        ListNode fast = start;</span><br><span class="line">        slow.next = head;</span><br><span class="line">        <span class="comment">//make the gap between slow and fast to be n </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n;i++)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//move the slow and fast pointer until the end of the node, keep the same distance</span></span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//slow's next one is the one we want to remove</span></span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line">        <span class="comment">//return the orginal head</span></span><br><span class="line">        <span class="keyword">return</span> start.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p><a href="https://discuss.leetcode.com/topic/7031/simple-java-solution-in-one-pass" target="_blank" rel="external">https://discuss.leetcode.com/topic/7031/simple-java-solution-in-one-pass</a><br>Move one pointer fast –&gt; n+1 places forward, to maintain a gap of n between the two pointers and then move both at the same speed. Finally, when the fast pointer reaches the end, the slow pointer will be n+1 places behind - just the right spot for it to be able to skip the next node.</p>
<p>Since the question gives that n is valid, not too many checks have to be put in place. Otherwise, this would be necessary.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-19-Remove-Nth-Node-From-End-of-List&quot;&gt;&lt;a href=&quot;#Question-19-Remove-Nth-Node-From-End-of-List&quot; class=&quot;headerlink&quot; title=&quot;Ques
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 438 Find all anagrams in a string</title>
    <link href="http://xytian315.github.io/2016/12/13/leetcode-438-Find-all-anagrams-in-a-string/"/>
    <id>http://xytian315.github.io/2016/12/13/leetcode-438-Find-all-anagrams-in-a-string/</id>
    <published>2016-12-13T08:11:15.000Z</published>
    <updated>2016-12-13T08:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-438-Find-All-Anagrams-in-a-String"><a href="#Question-438-Find-All-Anagrams-in-a-String" class="headerlink" title="Question: 438. Find All Anagrams in a String"></a>Question: 438. Find All Anagrams in a String</h3><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>
<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>
<p>The order of output does not matter.</p>
<p>Example 1:</p>
<p>Input:<br>s: “cbaebabacd” p: “abc”</p>
<p>Output:<br>[0, 6]</p>
<p>Explanation:<br>The substring with start index = 0 is “cba”, which is an anagram of “abc”.<br>The substring with start index = 6 is “bac”, which is an anagram of “abc”.<br>Example 2:</p>
<p>Input:<br>s: “abab” p: “ab”</p>
<p>Output:<br>[0, 1, 2]</p>
<p>Explanation:<br>The substring with start index = 0 is “ab”, which is an anagram of “ab”.<br>The substring with start index = 1 is “ba”, which is an anagram of “ab”.<br>The substring with start index = 2 is “ab”, which is an anagram of “ab”.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || p == <span class="keyword">null</span> || p.length() == <span class="number">0</span>) <span class="keyword">return</span> list;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span>[] hash = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>]; <span class="comment">//character hash</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//record each character in p to hash</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : p.toCharArray()) &#123;</span><br><span class="line">        hash[c]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//two points, initialize count to p's length</span></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, count = p.length();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</span><br><span class="line">        <span class="comment">//move right everytime, if the character exists in p's hash, decrease the count</span></span><br><span class="line">        <span class="comment">//current hash value &gt;= 1 means the character is existing in p</span></span><br><span class="line">        <span class="keyword">if</span> (hash[s.charAt(right)] &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line">        hash[s.charAt(right)]--;</span><br><span class="line">        right++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//when the count is down to 0, means we found the right anagram</span></span><br><span class="line">        <span class="comment">//then add window's left to result list</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//if we find the window's size equals to p, then we have to move left (narrow the window) to find the new match window</span></span><br><span class="line">        <span class="comment">//++ to reset the hash because we kicked out the left</span></span><br><span class="line">        <span class="comment">//only increase the count if the character is in p</span></span><br><span class="line">        <span class="comment">//the count &gt;= 0 indicate it was original in the hash, cuz it won't go below 0</span></span><br><span class="line">        <span class="keyword">if</span> (right - left == p.length() ) &#123;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> (hash[s.charAt(left)] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[s.charAt(left)]++;</span><br><span class="line">            left++;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p><a href="https://discuss.leetcode.com/topic/64434/shortest-concise-java-o-n-sliding-window-solution/4" target="_blank" rel="external">https://discuss.leetcode.com/topic/64434/shortest-concise-java-o-n-sliding-window-solution/4</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-438-Find-All-Anagrams-in-a-String&quot;&gt;&lt;a href=&quot;#Question-438-Find-All-Anagrams-in-a-String&quot; class=&quot;headerlink&quot; title=&quot;Question: 438. Find All Anagrams in a String&quot;&gt;&lt;/a&gt;Question: 438. Find All Anagrams in a String&lt;/h3&gt;&lt;p&gt;Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.&lt;/p&gt;
&lt;p&gt;Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.&lt;/p&gt;
&lt;p&gt;The order of output does not matter.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;s: “cbaebabacd” p: “abc”&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;[0, 6]&lt;/p&gt;
&lt;p&gt;Explanation:&lt;br&gt;The substring with start index = 0 is “cba”, which is an anagram of “abc”.&lt;br&gt;The substring with start index = 6 is “bac”, which is an anagram of “abc”.&lt;br&gt;Example 2:&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;s: “abab” p: “ab”&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;[0, 1, 2]&lt;/p&gt;
&lt;p&gt;Explanation:&lt;br&gt;The substring with start index = 0 is “ab”, which is an anagram of “ab”.&lt;br&gt;The substring with start index = 1 is “ba”, which is an anagram of “ab”.&lt;br&gt;The substring with start index = 2 is “ab”, which is an anagram of “ab”.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 409 Longest Palindrome</title>
    <link href="http://xytian315.github.io/2016/12/11/leetcode-409-Longest-Palindrome/"/>
    <id>http://xytian315.github.io/2016/12/11/leetcode-409-Longest-Palindrome/</id>
    <published>2016-12-12T05:24:46.000Z</published>
    <updated>2016-12-12T05:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-409-Longest-Palindrome"><a href="#Question-409-Longest-Palindrome" class="headerlink" title="Question: 409. Longest Palindrome"></a>Question: 409. Longest Palindrome</h3><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example “Aa” is not considered a palindrome here.</p>
<p>Note:<br>Assume the length of given string will not exceed 1,010.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(set.contains(c))&#123;</span><br><span class="line">                set.remove(c);</span><br><span class="line">                count+=<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!set.isEmpty()) count++;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p> just count the number of same pairs, then this can be used to put in the different direction to consist of palindrome. Then if there exist more chars, we can put one in the middle</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-409-Longest-Palindrome&quot;&gt;&lt;a href=&quot;#Question-409-Longest-Palindrome&quot; class=&quot;headerlink&quot; title=&quot;Question: 409. Longest Palindrome&quot;&gt;&lt;/a&gt;Question: 409. Longest Palindrome&lt;/h3&gt;&lt;p&gt;Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.&lt;/p&gt;
&lt;p&gt;This is case sensitive, for example “Aa” is not considered a palindrome here.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Assume the length of given string will not exceed 1,010.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>389 find the difference</title>
    <link href="http://xytian315.github.io/2016/12/10/leetcode-389-find-the-difference/"/>
    <id>http://xytian315.github.io/2016/12/10/leetcode-389-find-the-difference/</id>
    <published>2016-12-11T06:39:42.000Z</published>
    <updated>2016-12-11T06:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-389-Find-the-Difference"><a href="#Question-389-Find-the-Difference" class="headerlink" title="Question: 389. Find the Difference"></a>Question: 389. Find the Difference</h3><p>Given two strings s and t which consist of only lowercase letters.</p>
<p>String t is generated by random shuffling string s and then add one more letter at a random position.</p>
<p>Find the letter that was added in t.</p>
<p>Example:</p>
<p>Input:<br>s = “abcd”<br>t = “abcde”</p>
<p>Output:<br>e</p>
<p>Explanation:<br>‘e’ is the letter that was added.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c =s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                map.put(c, map.get(c)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c=t.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> c;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(c)&lt;=<span class="number">0</span>) <span class="keyword">return</span> c;</span><br><span class="line">                map.put(c, map.get(c)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t.charAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//better solution in discussion</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize variables to store sum of ASCII codes for </span></span><br><span class="line">        <span class="comment">// each string</span></span><br><span class="line">        <span class="keyword">int</span> charCodeS = <span class="number">0</span>, charCodeT = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// Iterate through both strings and char codes</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); ++i) charCodeS += (<span class="keyword">int</span>)s.charAt(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); ++i) charCodeT += (<span class="keyword">int</span>)t.charAt(i);</span><br><span class="line">        <span class="comment">// Return the difference between 2 strings as char</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">char</span>)(charCodeT - charCodeS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>1.just use the map to record the characters and count in the first s; loop the second s, descrease the correspoing value(count) by 1. if it doesn’t exist in the map it is the result; also if the count reach the 0, it is the result too.</p>
<ol>
<li>use ASCII code to represent the character in the string</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-389-Find-the-Difference&quot;&gt;&lt;a href=&quot;#Question-389-Find-the-Difference&quot; class=&quot;headerlink&quot; title=&quot;Question: 389. Find the Difference&quot;&gt;&lt;/a&gt;Question: 389. Find the Difference&lt;/h3&gt;&lt;p&gt;Given two strings s and t which consist of only lowercase letters.&lt;/p&gt;
&lt;p&gt;String t is generated by random shuffling string s and then add one more letter at a random position.&lt;/p&gt;
&lt;p&gt;Find the letter that was added in t.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;s = “abcd”&lt;br&gt;t = “abcde”&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;e&lt;/p&gt;
&lt;p&gt;Explanation:&lt;br&gt;‘e’ is the letter that was added.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>350 Intersection or two arrays II</title>
    <link href="http://xytian315.github.io/2016/12/10/leetcode-350-Intersection-or-two-arrays-II/"/>
    <id>http://xytian315.github.io/2016/12/10/leetcode-350-Intersection-or-two-arrays-II/</id>
    <published>2016-12-11T06:17:59.000Z</published>
    <updated>2016-12-11T06:28:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-350-Intersection-of-Two-Arrays-II"><a href="#Question-350-Intersection-of-Two-Arrays-II" class="headerlink" title="Question: 350. Intersection of Two Arrays II"></a>Question: 350. Intersection of Two Arrays II</h3><p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].</p>
<p>Note:<br>Each element in the result should appear as many times as it shows in both arrays.<br>The result can be in any order.<br>Follow up:<br>What if the given array is already sorted? How would you optimize your algorithm?<br>What if nums1’s size is small compared to nums2’s size? Which algorithm is better?<br>What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution </span></span><br><span class="line"><span class="comment">//time O(nlogn) (sort)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">        Arrays.sort(nums2);</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; array=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums1.length &amp;&amp; j&lt;nums2.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i]&lt;nums2[j])&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums1[i]&gt;nums2[j])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                array.add(nums1[i]);</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[array.size()];</span><br><span class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: array)&#123;</span><br><span class="line">            result[index]=e;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//another solution using hashmap</span></span><br><span class="line"><span class="comment">//time O(n) spaceO(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersect(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; array=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: nums1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(e))&#123;</span><br><span class="line">                map.put(e, map.get(e)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(e, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(e) &amp;&amp; map.get(e)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                array.add(e);</span><br><span class="line">                map.put(e, map.get(e)-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[array.size()];</span><br><span class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e: array)&#123;</span><br><span class="line">            result[index]=e;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>1.sort two array, used two pointers to compare each number. based comparison,increment the corresponding index.<br>2.use hashmap to tracking all the numbers and count. loop the second array, if it contains the key and value&gt;0, put it into result, also decrease the count(value);</p>
<ol>
<li>follow up answer from discussion<br>What if elements of nums2 are stored on disk, and the memory is<br>limited such that you cannot load all elements into the memory at<br>once?<br>If only nums2 cannot fit in memory, put all elements of nums1 into a HashMap, read chunks of array that fit into the memory, and record the intersections.</li>
</ol>
<p>If both nums1 and nums2 are so huge that neither fit into the memory, sort them individually (external sort), then read 2 elements from each array at a time in memory, record intersections.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-350-Intersection-of-Two-Arrays-II&quot;&gt;&lt;a href=&quot;#Question-350-Intersection-of-Two-Arrays-II&quot; class=&quot;headerlink&quot; title=&quot;Question: 350. Intersection of Two Arrays II&quot;&gt;&lt;/a&gt;Question: 350. Intersection of Two Arrays II&lt;/h3&gt;&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Each element in the result should appear as many times as it shows in both arrays.&lt;br&gt;The result can be in any order.&lt;br&gt;Follow up:&lt;br&gt;What if the given array is already sorted? How would you optimize your algorithm?&lt;br&gt;What if nums1’s size is small compared to nums2’s size? Which algorithm is better?&lt;br&gt;What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
      <category term="sort" scheme="http://xytian315.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 349 Intersection of two arrays</title>
    <link href="http://xytian315.github.io/2016/12/10/leetcode-349-Intersection-of-two-arrays/"/>
    <id>http://xytian315.github.io/2016/12/10/leetcode-349-Intersection-of-two-arrays/</id>
    <published>2016-12-11T06:05:28.000Z</published>
    <updated>2016-12-11T06:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-349-Intersection-of-Two-Arrays"><a href="#Question-349-Intersection-of-Two-Arrays" class="headerlink" title="Question: 349. Intersection of Two Arrays"></a>Question: 349. Intersection of Two Arrays</h3><p>Given two arrays, write a function to compute their intersection.</p>
<p>Example:<br>Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].<br>Note:<br>Each element in the result must be unique.<br>The result can be in any order.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele: nums1)&#123;</span><br><span class="line">            set1.add(ele);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele: nums2)&#123;</span><br><span class="line">            set2.add(ele);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele:set1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set2.add(ele))&#123;</span><br><span class="line">                set.add(ele);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result= <span class="keyword">new</span> <span class="keyword">int</span>[set.size()];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element:set)&#123;</span><br><span class="line">            result[index]=element;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//actually you can use only two sets</span></span><br><span class="line"><span class="comment">// time O(n) space O(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] intersection(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2) &#123;</span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele: nums1)&#123;</span><br><span class="line">            set1.add(ele);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ele:nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set1.contains(ele))&#123;</span><br><span class="line">                set.add(ele);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] result= <span class="keyword">new</span> <span class="keyword">int</span>[set.size()];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element:set)&#123;</span><br><span class="line">            result[index]=element;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>use one set to record all the unique numbers. Looping the second array, if the set contain that number, put it into intersection set</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-349-Intersection-of-Two-Arrays&quot;&gt;&lt;a href=&quot;#Question-349-Intersection-of-Two-Arrays&quot; class=&quot;headerlink&quot; title=&quot;Question: 349. Intersection of Two Arrays&quot;&gt;&lt;/a&gt;Question: 349. Intersection of Two Arrays&lt;/h3&gt;&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].&lt;br&gt;Note:&lt;br&gt;Each element in the result must be unique.&lt;br&gt;The result can be in any order.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 290 word pattern</title>
    <link href="http://xytian315.github.io/2016/12/09/leetcode-290-word-pattern/"/>
    <id>http://xytian315.github.io/2016/12/09/leetcode-290-word-pattern/</id>
    <published>2016-12-10T07:37:22.000Z</published>
    <updated>2016-12-10T07:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-290-Word-Pattern"><a href="#Question-290-Word-Pattern" class="headerlink" title="Question: 290. Word Pattern"></a>Question: 290. Word Pattern</h3><p>Given a pattern and a string str, find if str follows the same pattern.</p>
<p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</p>
<p>Examples:<br>pattern = “abba”, str = “dog cat cat dog” should return true.<br>pattern = “abba”, str = “dog cat cat fish” should return false.<br>pattern = “aaaa”, str = “dog cat cat dog” should return false.<br>pattern = “abba”, str = “dog dog dog dog” should return false.<br>Notes:<br>You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the question is exactly same as isomorphic string</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] strings =str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(pattern.length()!=strings.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Character, String&gt; map = <span class="keyword">new</span> HashMap&lt;Character, String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pattern.length();i++)&#123;</span><br><span class="line">            <span class="comment">//has seen the key(char) before the value must be the same</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(pattern.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(pattern.charAt(i)).compareTo(strings[i])!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//same value can not be mapping to different keys</span></span><br><span class="line">                <span class="keyword">if</span>(map.containsValue(strings[i])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(pattern.charAt(i), strings[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//my Solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] strings =str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(pattern.length()!=strings.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pattern.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(pattern.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">int</span> index = map.get(pattern.charAt(i));</span><br><span class="line">                <span class="keyword">if</span>(strings[i].compareTo(strings[index])!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.isEmpty() &amp;&amp; strings[i].compareTo(strings[last])==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(pattern.charAt(i),i);</span><br><span class="line">                last =i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>This question is exactly same as isomorphic string<br>in isomorphic string is char mapping to char, here is char mapping to string</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-290-Word-Pattern&quot;&gt;&lt;a href=&quot;#Question-290-Word-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Question: 290. Word Pattern&quot;&gt;&lt;/a&gt;Question: 290. Word Pattern&lt;/h3&gt;&lt;p&gt;Given a pattern and a string str, find if str follows the same pattern.&lt;/p&gt;
&lt;p&gt;Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.&lt;/p&gt;
&lt;p&gt;Examples:&lt;br&gt;pattern = “abba”, str = “dog cat cat dog” should return true.&lt;br&gt;pattern = “abba”, str = “dog cat cat fish” should return false.&lt;br&gt;pattern = “aaaa”, str = “dog cat cat dog” should return false.&lt;br&gt;pattern = “abba”, str = “dog dog dog dog” should return false.&lt;br&gt;Notes:&lt;br&gt;You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 299 Bulls and Cows</title>
    <link href="http://xytian315.github.io/2016/12/08/leetcode-299-Bulls-and-Cows/"/>
    <id>http://xytian315.github.io/2016/12/08/leetcode-299-Bulls-and-Cows/</id>
    <published>2016-12-09T06:42:54.000Z</published>
    <updated>2016-12-10T07:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-299-Bulls-and-Cows"><a href="#Question-299-Bulls-and-Cows" class="headerlink" title="Question: 299. Bulls and Cows"></a>Question: 299. Bulls and Cows</h3><p>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p>
<p>For example:</p>
<p>Secret number:  “1807”<br>Friend’s guess: “7810”<br>Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)<br>Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return “1A3B”.</p>
<p>Please note that both secret number and friend’s guess may contain duplicate digits, for example:</p>
<p>Secret number:  “1123”<br>Friend’s guess: “0111”<br>In this case, the 1st 1 in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return “1A1B”.<br>You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//solution from discussion</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> bulls=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cows=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;secret.length();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s = Character.getNumericValue(secret.charAt(i));</span><br><span class="line">            <span class="keyword">int</span> g = Character.getNumericValue(guess.charAt(i));</span><br><span class="line">            <span class="keyword">if</span>(s==g)&#123;</span><br><span class="line">                bulls++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(numbers[s]&lt;<span class="number">0</span>) cows++;</span><br><span class="line">                <span class="keyword">if</span>(numbers[g]&gt;<span class="number">0</span>) cows++;</span><br><span class="line">                numbers[s]++;</span><br><span class="line">                numbers[g]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bulls+<span class="string">"A"</span>+cows+<span class="string">"B"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my complicated solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bulls =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cows =<span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;secret.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(secret.charAt(i)==guess.charAt(i))&#123;</span><br><span class="line">                bulls++;</span><br><span class="line">                set.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Character s = secret.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(s)) &#123;</span><br><span class="line">                    map.put(s, map.get(s) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(s, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;guess.length();i++)&#123;</span><br><span class="line">            Character g = guess.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(g)&amp;&amp;!set.contains(i))&#123;</span><br><span class="line">                map.put(g,map.get(g)-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(g) &gt;=<span class="number">0</span>) cows++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(bulls);</span><br><span class="line">        sb.append(<span class="string">"A"</span>);</span><br><span class="line">        sb.append(cows);</span><br><span class="line">        sb.append(<span class="string">"B"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>The idea is to iterate over the numbers in secret and in guess and count all bulls right away. For cows maintain an array that stores count of the number appearances in secret and in guess. Increment cows when either number from secret was already seen in guest or vice versa.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-299-Bulls-and-Cows&quot;&gt;&lt;a href=&quot;#Question-299-Bulls-and-Cows&quot; class=&quot;headerlink&quot; title=&quot;Question: 299. Bulls and Cows&quot;&gt;&lt;/a&gt;Question: 299. Bulls and Cows&lt;/h3&gt;&lt;p&gt;You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Secret number:  “1807”&lt;br&gt;Friend’s guess: “7810”&lt;br&gt;Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)&lt;br&gt;Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return “1A3B”.&lt;/p&gt;
&lt;p&gt;Please note that both secret number and friend’s guess may contain duplicate digits, for example:&lt;/p&gt;
&lt;p&gt;Secret number:  “1123”&lt;br&gt;Friend’s guess: “0111”&lt;br&gt;In this case, the 1st 1 in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return “1A1B”.&lt;br&gt;You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
</feed>
