<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kristy&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xytian315.github.io/"/>
  <updated>2016-12-10T07:38:51.000Z</updated>
  <id>http://xytian315.github.io/</id>
  
  <author>
    <name>Kristy Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 290 word pattern</title>
    <link href="http://xytian315.github.io/2016/12/09/leetcode-290-word-pattern/"/>
    <id>http://xytian315.github.io/2016/12/09/leetcode-290-word-pattern/</id>
    <published>2016-12-10T07:37:22.000Z</published>
    <updated>2016-12-10T07:38:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-290-Word-Pattern"><a href="#Question-290-Word-Pattern" class="headerlink" title="Question: 290. Word Pattern"></a>Question: 290. Word Pattern</h3><p>Given a pattern and a string str, find if str follows the same pattern.</p>
<p>Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.</p>
<p>Examples:<br>pattern = “abba”, str = “dog cat cat dog” should return true.<br>pattern = “abba”, str = “dog cat cat fish” should return false.<br>pattern = “aaaa”, str = “dog cat cat dog” should return false.<br>pattern = “abba”, str = “dog dog dog dog” should return false.<br>Notes:<br>You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">wordPattern</span><span class="params">(String pattern, String str)</span> </span>&#123;</span><br><span class="line">        String[] strings =str.split(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span>(pattern.length()!=strings.length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;pattern.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(pattern.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">int</span> index = map.get(pattern.charAt(i));</span><br><span class="line">                <span class="keyword">if</span>(strings[i].compareTo(strings[index])!=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!map.isEmpty() &amp;&amp; strings[i].compareTo(strings[last])==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(pattern.charAt(i),i);</span><br><span class="line">                last =i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-290-Word-Pattern&quot;&gt;&lt;a href=&quot;#Question-290-Word-Pattern&quot; class=&quot;headerlink&quot; title=&quot;Question: 290. Word Pattern&quot;&gt;&lt;/a&gt;Question: 290. Word Pattern&lt;/h3&gt;&lt;p&gt;Given a pattern and a string str, find if str follows the same pattern.&lt;/p&gt;
&lt;p&gt;Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.&lt;/p&gt;
&lt;p&gt;Examples:&lt;br&gt;pattern = “abba”, str = “dog cat cat dog” should return true.&lt;br&gt;pattern = “abba”, str = “dog cat cat fish” should return false.&lt;br&gt;pattern = “aaaa”, str = “dog cat cat dog” should return false.&lt;br&gt;pattern = “abba”, str = “dog dog dog dog” should return false.&lt;br&gt;Notes:&lt;br&gt;You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 299 Bulls and Cows</title>
    <link href="http://xytian315.github.io/2016/12/08/leetcode-299-Bulls-and-Cows/"/>
    <id>http://xytian315.github.io/2016/12/08/leetcode-299-Bulls-and-Cows/</id>
    <published>2016-12-09T06:42:54.000Z</published>
    <updated>2016-12-10T07:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-299-Bulls-and-Cows"><a href="#Question-299-Bulls-and-Cows" class="headerlink" title="Question: 299. Bulls and Cows"></a>Question: 299. Bulls and Cows</h3><p>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p>
<p>For example:</p>
<p>Secret number:  “1807”<br>Friend’s guess: “7810”<br>Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)<br>Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return “1A3B”.</p>
<p>Please note that both secret number and friend’s guess may contain duplicate digits, for example:</p>
<p>Secret number:  “1123”<br>Friend’s guess: “0111”<br>In this case, the 1st 1 in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return “1A1B”.<br>You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//solution from discussion</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> bulls=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cows=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;secret.length();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s = Character.getNumericValue(secret.charAt(i));</span><br><span class="line">            <span class="keyword">int</span> g = Character.getNumericValue(guess.charAt(i));</span><br><span class="line">            <span class="keyword">if</span>(s==g)&#123;</span><br><span class="line">                bulls++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(numbers[s]&lt;<span class="number">0</span>) cows++;</span><br><span class="line">                <span class="keyword">if</span>(numbers[g]&gt;<span class="number">0</span>) cows++;</span><br><span class="line">                numbers[s]++;</span><br><span class="line">                numbers[g]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bulls+<span class="string">"A"</span>+cows+<span class="string">"B"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my complicated solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bulls =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cows =<span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;secret.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(secret.charAt(i)==guess.charAt(i))&#123;</span><br><span class="line">                bulls++;</span><br><span class="line">                set.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Character s = secret.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(s)) &#123;</span><br><span class="line">                    map.put(s, map.get(s) + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(s, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;guess.length();i++)&#123;</span><br><span class="line">            Character g = guess.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(g)&amp;&amp;!set.contains(i))&#123;</span><br><span class="line">                map.put(g,map.get(g)-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(g) &gt;=<span class="number">0</span>) cows++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(bulls);</span><br><span class="line">        sb.append(<span class="string">"A"</span>);</span><br><span class="line">        sb.append(cows);</span><br><span class="line">        sb.append(<span class="string">"B"</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>The idea is to iterate over the numbers in secret and in guess and count all bulls right away. For cows maintain an array that stores count of the number appearances in secret and in guess. Increment cows when either number from secret was already seen in guest or vice versa.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-299-Bulls-and-Cows&quot;&gt;&lt;a href=&quot;#Question-299-Bulls-and-Cows&quot; class=&quot;headerlink&quot; title=&quot;Question: 299. Bulls and Cows&quot;&gt;&lt;/a&gt;Question: 299. Bulls and Cows&lt;/h3&gt;&lt;p&gt;You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Secret number:  “1807”&lt;br&gt;Friend’s guess: “7810”&lt;br&gt;Hint: 1 bull and 3 cows. (The bull is 8, the cows are 0, 1 and 7.)&lt;br&gt;Write a function to return a hint according to the secret number and friend’s guess, use A to indicate the bulls and B to indicate the cows. In the above example, your function should return “1A3B”.&lt;/p&gt;
&lt;p&gt;Please note that both secret number and friend’s guess may contain duplicate digits, for example:&lt;/p&gt;
&lt;p&gt;Secret number:  “1123”&lt;br&gt;Friend’s guess: “0111”&lt;br&gt;In this case, the 1st 1 in friend’s guess is a bull, the 2nd or 3rd 1 is a cow, and your function should return “1A1B”.&lt;br&gt;You may assume that the secret number and your friend’s guess only contain digits, and their lengths are always equal.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 242 Valid Anagram</title>
    <link href="http://xytian315.github.io/2016/12/08/leetcode-242-Valid-Anagram/"/>
    <id>http://xytian315.github.io/2016/12/08/leetcode-242-Valid-Anagram/</id>
    <published>2016-12-09T05:35:06.000Z</published>
    <updated>2016-12-09T07:13:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-242-Valid-Anagram"><a href="#Question-242-Valid-Anagram" class="headerlink" title="Question: 242. Valid Anagram"></a>Question: 242. Valid Anagram</h3><p>Given two strings s and t, write a function to determine if t is an anagram of s.</p>
<p>For example,<br>s = “anagram”, t = “nagaram”, return true.<br>s = “rat”, t = “car”, return false.</p>
<p>Note:<br>You may assume the string contains only lowercase alphabets.</p>
<p>Follow up:<br>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p>
<a id="more"></a>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//use array</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] chars= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            chars[s.charAt(i)-<span class="string">'a'</span>]++;</span><br><span class="line">            chars[t.charAt(i)-<span class="string">'a'</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element:chars)&#123;</span><br><span class="line">            <span class="keyword">if</span>(element!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//use map</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(i)))&#123;</span><br><span class="line">                map.put(s.charAt(i), map.get(s.charAt(i))+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(s.charAt(i),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(t.charAt(i)) &amp;&amp; (map.get(t.charAt(i))&gt;<span class="number">0</span>)) &#123;</span><br><span class="line">                map.put(t.charAt(i),map.get(t.charAt(i))-<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my solution</span></span><br><span class="line"><span class="comment">//the strings only include 26 english letter, I don't need to use ASCII 256 length</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=t.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span>[] chars = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span>[] chart = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">            chars[i]=chart[i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            chars[s.charAt(i)]=chars[s.charAt(i)]+<span class="number">1</span>;</span><br><span class="line">            chart[t.charAt(i)]=chart[t.charAt(i)]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chars[i]!=chart[i])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>We can use a map or an array to keep tracking,<br>the total number for the same character should be the same. the difference of the number should be 0.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-242-Valid-Anagram&quot;&gt;&lt;a href=&quot;#Question-242-Valid-Anagram&quot; class=&quot;headerlink&quot; title=&quot;Question: 242. Valid Anagram&quot;&gt;&lt;/a&gt;Question: 242. Valid Anagram&lt;/h3&gt;&lt;p&gt;Given two strings s and t, write a function to determine if t is an anagram of s.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;s = “anagram”, t = “nagaram”, return true.&lt;br&gt;s = “rat”, t = “car”, return false.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;You may assume the string contains only lowercase alphabets.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;What if the inputs contain unicode characters? How would you adapt your solution to such case?&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 205 Isomorphic strings</title>
    <link href="http://xytian315.github.io/2016/12/08/leetcode-205-Isomorphic-strings/"/>
    <id>http://xytian315.github.io/2016/12/08/leetcode-205-Isomorphic-strings/</id>
    <published>2016-12-09T03:56:50.000Z</published>
    <updated>2016-12-09T04:13:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-205-Isomorphic-Strings"><a href="#Question-205-Isomorphic-Strings" class="headerlink" title="Question: 205. Isomorphic Strings"></a>Question: 205. Isomorphic Strings</h3><p>Given two strings s and t, determine if they are isomorphic.</p>
<p>Two strings are isomorphic if the characters in s can be replaced to get t.</p>
<p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIsomorphic</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">        Map&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Character&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(s.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(s.charAt(i))!=t.charAt(i))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsValue((t.charAt(i))))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                map.put(s.charAt(i), t.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>Keywords: No two characters may map to the same character.<br>define a map which tracks the char-char mappings. If a value is already mapped, it can not be mapped again.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-205-Isomorphic-Strings&quot;&gt;&lt;a href=&quot;#Question-205-Isomorphic-Strings&quot; class=&quot;headerlink&quot; title=&quot;Question: 205. Isomorphic Strings&quot;&gt;&lt;/a&gt;Question: 205. Isomorphic Strings&lt;/h3&gt;&lt;p&gt;Given two strings s and t, determine if they are isomorphic.&lt;/p&gt;
&lt;p&gt;Two strings are isomorphic if the characters in s can be replaced to get t.&lt;/p&gt;
&lt;p&gt;All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 204 count primes</title>
    <link href="http://xytian315.github.io/2016/12/07/leetcode-204-count-primes/"/>
    <id>http://xytian315.github.io/2016/12/07/leetcode-204-count-primes/</id>
    <published>2016-12-08T03:13:02.000Z</published>
    <updated>2016-12-08T03:18:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-204-Count-Primes"><a href="#Question-204-Count-Primes" class="headerlink" title="Question: 204. Count Primes"></a>Question: 204. Count Primes</h3><p>Description:<br>Count the number of prime numbers less than a non-negative number, n.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{
        <span class="keyword">boolean</span>[] notPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];
        <span class="keyword">int</span> count=<span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++){
            <span class="keyword">if</span>(notPrime[i]==<span class="keyword">false</span>){
                count++;
                <span class="keyword">int</span> j=<span class="number">2</span>;
                <span class="keyword">while</span>(i*j&lt;=n-<span class="number">1</span>){
                    notPrime[i*j]=<span class="keyword">true</span>;
                    j++;
                }
            }
        }
        <span class="keyword">return</span> count;
    }
}
</code></pre>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts:"></a>Thoughts:</h3><p>use boolean array to record if it is prime or not<br>the initial value of boolean is false</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-204-Count-Primes&quot;&gt;&lt;a href=&quot;#Question-204-Count-Primes&quot; class=&quot;headerlink&quot; title=&quot;Question: 204. Count Primes&quot;&gt;&lt;/a&gt;Question: 204. Count Primes&lt;/h3&gt;&lt;p&gt;Description:&lt;br&gt;Count the number of prime numbers less than a non-negative number, n.&lt;br&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 202 Happy number</title>
    <link href="http://xytian315.github.io/2016/12/06/leetcode-202-Happy-number/"/>
    <id>http://xytian315.github.io/2016/12/06/leetcode-202-Happy-number/</id>
    <published>2016-12-07T06:43:35.000Z</published>
    <updated>2016-12-07T06:47:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-202-Happy-Number"><a href="#Question-202-Happy-Number" class="headerlink" title="Question: 202. Happy Number"></a>Question: 202. Happy Number</h3><p>Write an algorithm to determine if a number is “happy”.</p>
<p>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.</p>
<p>Example: 19 is a happy number</p>
<p>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(set.add(n))&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                sum +=(n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">                n=n/<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            n=sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><ol>
<li>Endless cycle is the hint for using the set to track the numbers since if it is endless cycle, it must return the same number again.</li>
<li>Use a while loop to keep summing the numbers</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-202-Happy-Number&quot;&gt;&lt;a href=&quot;#Question-202-Happy-Number&quot; class=&quot;headerlink&quot; title=&quot;Question: 202. Happy Number&quot;&gt;&lt;/a&gt;Question: 202. Happy Number&lt;/h3&gt;&lt;p&gt;Write an algorithm to determine if a number is “happy”.&lt;/p&gt;
&lt;p&gt;A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.&lt;/p&gt;
&lt;p&gt;Example: 19 is a happy number&lt;/p&gt;
&lt;p&gt;12 + 92 = 82&lt;br&gt;82 + 22 = 68&lt;br&gt;62 + 82 = 100&lt;br&gt;12 + 02 + 02 = 1&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 136 Single number</title>
    <link href="http://xytian315.github.io/2016/12/06/leetcode-136-Single-number/"/>
    <id>http://xytian315.github.io/2016/12/06/leetcode-136-Single-number/</id>
    <published>2016-12-07T05:18:33.000Z</published>
    <updated>2016-12-07T06:44:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-136-Single-Number"><a href="#Question-136-Single-Number" class="headerlink" title="Question: 136. Single Number"></a>Question: 136. Single Number</h3><p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<p>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//the solution from discussion</span></span><br><span class="line"><span class="comment">//O(n) time 0 extra space</span></span><br><span class="line"><span class="comment">//A XOR A = 0 and the XOR operator is commutative</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            result=result^nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysolution1 O(n) time O(n) extra space</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.add(element))&#123;</span><br><span class="line">                set.remove(element);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(element);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] result =set.toArray()</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>)result[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysolution2 O(n) time O(n) extra space</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(element))&#123;</span><br><span class="line">                map.put(element,map.get(element)+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(element,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> element:nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(element)==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> element;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>if without extra space, thinking about bit manipulation?<br>XOR bitwise manipulation A XOR A = 0; A XOR A XOR B = B;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-136-Single-Number&quot;&gt;&lt;a href=&quot;#Question-136-Single-Number&quot; class=&quot;headerlink&quot; title=&quot;Question: 136. Single Number&quot;&gt;&lt;/a&gt;Question: 136. Single Number&lt;/h3&gt;&lt;p&gt;Given an array of integers, every element appears twice except for one. Find that single one.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 36 valid sudoku</title>
    <link href="http://xytian315.github.io/2016/12/06/leetcode-36-valid-sudoku/"/>
    <id>http://xytian315.github.io/2016/12/06/leetcode-36-valid-sudoku/</id>
    <published>2016-12-07T04:31:17.000Z</published>
    <updated>2016-12-07T04:46:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-36-Valid-Sudoku"><a href="#Question-36-Valid-Sudoku" class="headerlink" title="Question: 36. Valid Sudoku"></a>Question: 36. Valid Sudoku</h3><p>Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.</p>
<p>The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.<br>Note:<br>A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//validate rows</span></span><br><span class="line">            <span class="keyword">if</span> (!validate(i, i + <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//validate cols</span></span><br><span class="line">            <span class="keyword">if</span> (!validate(<span class="number">0</span>, <span class="number">9</span>, i, i + <span class="number">1</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//validate cells</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j += <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!validate(i, i + <span class="number">3</span>, j, j + <span class="number">3</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(<span class="keyword">int</span> rowStart, <span class="keyword">int</span> rowEnd, <span class="keyword">int</span> colStart, <span class="keyword">int</span> colEnd, <span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = rowStart; i &lt; rowEnd; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = colStart; j &lt; colEnd; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!set.add(board[i][j]) &amp;&amp; board[i][j] != <span class="string">'.'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//my first time solution</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidSudoku</span><span class="params">(<span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//validate rows</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validate(i, i + <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//validate columns</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!validate(<span class="number">0</span>, <span class="number">9</span>, i, i + <span class="number">1</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//validate cells</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i += <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j += <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!validate(i, i + <span class="number">3</span>, j, j + <span class="number">3</span>, board)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">(<span class="keyword">int</span> rowStart, <span class="keyword">int</span> rowEnd, <span class="keyword">int</span> colStart, <span class="keyword">int</span> colEnd, <span class="keyword">char</span>[][] board)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = rowStart; i &lt; rowEnd; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = colStart; j &lt; colEnd; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!set.add(board[i][j]) &amp;&amp; board[i][j] != <span class="string">'.'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><ol>
<li>Soduku will be always 9rows 9 columns I don’t need to get the length like this board.length</li>
<li>always checking if we can refactor it. make it DRY</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-36-Valid-Sudoku&quot;&gt;&lt;a href=&quot;#Question-36-Valid-Sudoku&quot; class=&quot;headerlink&quot; title=&quot;Question: 36. Valid Sudoku&quot;&gt;&lt;/a&gt;Question: 36. Valid Sudoku&lt;/h3&gt;&lt;p&gt;Determine if a Sudoku is valid, according to: Sudoku Puzzles - The Rules.&lt;/p&gt;
&lt;p&gt;The Sudoku board could be partially filled, where empty cells are filled with the character ‘.’.&lt;br&gt;Note:&lt;br&gt;A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 414 Third Maximum number</title>
    <link href="http://xytian315.github.io/2016/12/05/leetcode-414-Third-Maximum-number/"/>
    <id>http://xytian315.github.io/2016/12/05/leetcode-414-Third-Maximum-number/</id>
    <published>2016-12-06T05:55:27.000Z</published>
    <updated>2016-12-06T05:58:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-414-Third-Maximum-Number"><a href="#Question-414-Third-Maximum-Number" class="headerlink" title="Question: 414. Third Maximum Number"></a>Question: 414. Third Maximum Number</h3><p>Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).</p>
<p>Example 1:<br>Input: [3, 2, 1]</p>
<p>Output: 1</p>
<p>Explanation: The third maximum is 1.<br>Example 2:<br>Input: [1, 2]</p>
<p>Output: 2</p>
<p>Explanation: The third maximum does not exist, so the maximum (2) is returned instead.<br>Example 3:<br>Input: [2, 2, 3, 1]</p>
<p>Output: 1</p>
<p>Explanation: Note that the third maximum here means the third maximum distinct number.<br>Both numbers with value 2 are both considered as second maximum.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">thirdMax</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> max = Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">long</span> mid = Long.MIN_VALUE;;</span><br><span class="line">        <span class="keyword">long</span> min = Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;max)&#123;</span><br><span class="line">                min=mid;</span><br><span class="line">                mid=max;</span><br><span class="line">                max=i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&lt;max &amp;&amp; i&gt;mid)&#123;</span><br><span class="line">                min=mid;</span><br><span class="line">                mid=i;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i&gt;min &amp;&amp; i&lt;mid)&#123;</span><br><span class="line">                min=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min!=Long.MIN_VALUE)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)min;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>)max;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>should use long to initiate min value</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-414-Third-Maximum-Number&quot;&gt;&lt;a href=&quot;#Question-414-Third-Maximum-Number&quot; class=&quot;headerlink&quot; title=&quot;Question: 414. Third Maximum Number&quot;&gt;&lt;/a&gt;Question: 414. Third Maximum Number&lt;/h3&gt;&lt;p&gt;Given a non-empty array of integers, return the third maximum number in this array. If it does not exist, return the maximum number. The time complexity must be in O(n).&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;Input: [3, 2, 1]&lt;/p&gt;
&lt;p&gt;Output: 1&lt;/p&gt;
&lt;p&gt;Explanation: The third maximum is 1.&lt;br&gt;Example 2:&lt;br&gt;Input: [1, 2]&lt;/p&gt;
&lt;p&gt;Output: 2&lt;/p&gt;
&lt;p&gt;Explanation: The third maximum does not exist, so the maximum (2) is returned instead.&lt;br&gt;Example 3:&lt;br&gt;Input: [2, 2, 3, 1]&lt;/p&gt;
&lt;p&gt;Output: 1&lt;/p&gt;
&lt;p&gt;Explanation: Note that the third maximum here means the third maximum distinct number.&lt;br&gt;Both numbers with value 2 are both considered as second maximum.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 88 Merge sorted array</title>
    <link href="http://xytian315.github.io/2016/12/05/leetcode-88-merge-sorted-array-0/"/>
    <id>http://xytian315.github.io/2016/12/05/leetcode-88-merge-sorted-array-0/</id>
    <published>2016-12-06T00:37:50.000Z</published>
    <updated>2016-12-06T05:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-88-Merge-Sorted-Array"><a href="#Question-88-Merge-Sorted-Array" class="headerlink" title="Question: 88. Merge Sorted Array"></a>Question: 88. Merge Sorted Array</h3><p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>
<p>Note:<br>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//not good solution did by myself</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] temp = nums1.clone();</span><br><span class="line">        <span class="keyword">while</span>(start1&lt;m &amp;&amp; start2&lt;n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp[start1]&lt;=nums2[start2])&#123;</span><br><span class="line">                nums1[start]=temp[start1];</span><br><span class="line">                start1++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums1[start]=nums2[start2];</span><br><span class="line">                start2++;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start1!=m)&#123;</span><br><span class="line">            <span class="keyword">while</span>(start1&lt;m)&#123;</span><br><span class="line">                nums1[start]=temp[start1];</span><br><span class="line">                start1++;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start2!=n)&#123;</span><br><span class="line">            <span class="keyword">while</span>(start2&lt;n)&#123;</span><br><span class="line">                nums1[start]=nums2[start2];</span><br><span class="line">                start2++;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//better solution after reading the discussion</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> m, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=m-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = m+n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[i]&gt;=nums2[j])&#123;</span><br><span class="line">                nums1[index]=nums1[i];</span><br><span class="line">                i--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums1[index]=nums2[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            nums1[index]=nums2[j];</span><br><span class="line">            j--;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>when doing things in place in array, thinking about starting backwords.<br>also noted after comparing two array, we only need to check if nums2 is already finished do not need to check nums1 since nums1’s elements are already in the right place</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-88-Merge-Sorted-Array&quot;&gt;&lt;a href=&quot;#Question-88-Merge-Sorted-Array&quot; class=&quot;headerlink&quot; title=&quot;Question: 88. Merge Sorted Array&quot;&gt;&lt;/a&gt;Question: 88. Merge Sorted Array&lt;/h3&gt;&lt;p&gt;Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 27 remove element</title>
    <link href="http://xytian315.github.io/2016/12/04/leetcode-27-remove-element-0/"/>
    <id>http://xytian315.github.io/2016/12/04/leetcode-27-remove-element-0/</id>
    <published>2016-12-04T20:28:35.000Z</published>
    <updated>2016-12-06T05:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-27-Remove-Element"><a href="#Question-27-Remove-Element" class="headerlink" title="Question: 27. Remove Element"></a>Question: 27. Remove Element</h3><p>Given an array and a value, remove all instances of that value in place and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p>
<p>Example:<br>Given input array nums = [3,2,2,3], val = 3</p>
<p>Your function should return length = 2, with the first two elements of nums being 2.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">//my solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>{
        <span class="keyword">int</span> current =<span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length;i++){
            <span class="keyword">if</span>(nums[i]!=val){
                nums[current]=nums[i];
                current++;
            }
        }
        <span class="keyword">return</span> current;
    }
}
</code></pre>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>return current not (current+1)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-27-Remove-Element&quot;&gt;&lt;a href=&quot;#Question-27-Remove-Element&quot; class=&quot;headerlink&quot; title=&quot;Question: 27. Remove Element&quot;&gt;&lt;/a&gt;Question: 27. Remove Element&lt;/h3&gt;&lt;p&gt;Given an array and a value, remove all instances of that value in place and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this in place with constant memory.&lt;/p&gt;
&lt;p&gt;The order of elements can be changed. It doesn’t matter what you leave beyond the new length.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given input array nums = [3,2,2,3], val = 3&lt;/p&gt;
&lt;p&gt;Your function should return length = 2, with the first two elements of nums being 2.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 1 two sum</title>
    <link href="http://xytian315.github.io/2016/12/04/leetcode-1-two-sum/"/>
    <id>http://xytian315.github.io/2016/12/04/leetcode-1-two-sum/</id>
    <published>2016-12-04T20:11:31.000Z</published>
    <updated>2016-12-07T05:33:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-1-Two-Sum"><a href="#Question-1-Two-Sum" class="headerlink" title="Question: 1. Two Sum"></a>Question: 1. Two Sum</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution.</p>
<p>Example:<br>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target-nums[i]))&#123;</span><br><span class="line">                result[<span class="number">0</span>]=map.get(target-nums[i]);</span><br><span class="line">                result[<span class="number">1</span>]=i;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(nums[i], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-1-Two-Sum&quot;&gt;&lt;a href=&quot;#Question-1-Two-Sum&quot; class=&quot;headerlink&quot; title=&quot;Question: 1. Two Sum&quot;&gt;&lt;/a&gt;Question: 1. Two Sum&lt;/h3&gt;&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums = [2, 7, 11, 15], target = 9,&lt;/p&gt;
&lt;p&gt;Because nums[0] + nums[1] = 2 + 7 = 9,&lt;br&gt;return [0, 1].&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 219 contains duplicate II</title>
    <link href="http://xytian315.github.io/2016/12/04/leetcode-219-contains-duplicate-II/"/>
    <id>http://xytian315.github.io/2016/12/04/leetcode-219-contains-duplicate-II/</id>
    <published>2016-12-04T18:17:25.000Z</published>
    <updated>2016-12-09T04:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-219-Contains-Duplicate-II"><a href="#Question-219-Contains-Duplicate-II" class="headerlink" title="Question: 219. Contains Duplicate II"></a>Question: 219. Contains Duplicate II</h3><p>Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my solution use a hashmap</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;=<span class="number">1</span> || k&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(nums[i]) &amp;&amp; (i-map.get(nums[i])&lt;=k))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(nums[i],i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//better solution you can use hashset </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsNearbyDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt; k) set.remove(nums[i-k-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(!set.add(nums[i])) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-219-Contains-Duplicate-II&quot;&gt;&lt;a href=&quot;#Question-219-Contains-Duplicate-II&quot; class=&quot;headerlink&quot; title=&quot;Question: 219. Contains Duplicate II&quot;&gt;&lt;/a&gt;Question: 219. Contains Duplicate II&lt;/h3&gt;&lt;p&gt;Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 217 contains duplicate</title>
    <link href="http://xytian315.github.io/2016/12/03/leetcode-217-contains-duplicate/"/>
    <id>http://xytian315.github.io/2016/12/03/leetcode-217-contains-duplicate/</id>
    <published>2016-12-03T23:21:20.000Z</published>
    <updated>2016-12-09T04:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-217-Contains-Duplicate"><a href="#Question-217-Contains-Duplicate" class="headerlink" title="Question: 217. Contains Duplicate"></a>Question: 217. Contains Duplicate</h3><p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//time O(n) space O(n)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsDuplicate</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                set.add(nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-217-Contains-Duplicate&quot;&gt;&lt;a href=&quot;#Question-217-Contains-Duplicate&quot; class=&quot;headerlink&quot; title=&quot;Question: 217. Contains Duplicate&quot;&gt;&lt;/a&gt;Question: 217. Contains Duplicate&lt;/h3&gt;&lt;p&gt;Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 121 best time to buy and sell stock</title>
    <link href="http://xytian315.github.io/2016/12/03/leetcode-121-best-time-to-buy-and-sell-stock/"/>
    <id>http://xytian315.github.io/2016/12/03/leetcode-121-best-time-to-buy-and-sell-stock/</id>
    <published>2016-12-03T20:35:27.000Z</published>
    <updated>2016-12-06T05:12:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-121-Best-Time-to-Buy-and-Sell-Stock"><a href="#Question-121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Question: 121. Best Time to Buy and Sell Stock"></a>Question: 121. Best Time to Buy and Sell Stock</h3><p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Example 1:<br>Input: [7, 1, 5, 3, 6, 4]<br>Output: 5</p>
<p>max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)<br>Example 2:<br>Input: [7, 6, 4, 3, 1]<br>Output: 0</p>
<p>In this case, no transaction is done, i.e. max profit = 0.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//after reading kadane's algorithm, I wrote this solution</span></span><br><span class="line"><span class="comment">//O(n) time</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(prices.length == <span class="number">0</span>) <span class="keyword">return</span> max;</span><br><span class="line">        <span class="keyword">int</span> start =prices[prices.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=prices.length-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            start= Math.max(prices[i], start);</span><br><span class="line">            max=Math.max(max,start-prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//brute force</span></span><br><span class="line"><span class="comment">//O(n2)time</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = prices.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(index&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = index-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> profit = prices[index]-prices[j];</span><br><span class="line">                <span class="keyword">if</span>(profit&gt;result)&#123;</span><br><span class="line">                    result=profit;</span><br><span class="line">                &#125;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>max subarray problem (kadane’s algorithm) <a href="https://en.wikipedia.org/wiki/Maximum_subarray_problem" target="_blank" rel="external">https://en.wikipedia.org/wiki/Maximum_subarray_problem</a></p>
<p>Kadane’s algorithm consists of a scan through the array values, computing at each position the maximum (positive sum) subarray ending at that position. This subarray is either empty (in which case its sum is zero) or consists of one more element than the maximum subarray ending at the previous position. The algorithm only needs to keep track of the ending position because the implied starting position is just after the last position at which the sum went negative; a higher sum can always be found by dropping any negative-sum prefix. Thus, the problem can be solved with the following code, expressed here in Python:</p>
<p>def max_subarray(A):<br>    max_ending_here = max_so_far = 0<br>    for x in A:<br>        max_ending_here = max(0, max_ending_here + x)<br>        max_so_far = max(max_so_far, max_ending_here)<br>    return max_so_far</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-121-Best-Time-to-Buy-and-Sell-Stock&quot;&gt;&lt;a href=&quot;#Question-121-Best-Time-to-Buy-and-Sell-Stock&quot; class=&quot;headerlink&quot; title=&quot;Question: 121. Best Time to Buy and Sell Stock&quot;&gt;&lt;/a&gt;Question: 121. Best Time to Buy and Sell Stock&lt;/h3&gt;&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;Input: [7, 1, 5, 3, 6, 4]&lt;br&gt;Output: 5&lt;/p&gt;
&lt;p&gt;max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)&lt;br&gt;Example 2:&lt;br&gt;Input: [7, 6, 4, 3, 1]&lt;br&gt;Output: 0&lt;/p&gt;
&lt;p&gt;In this case, no transaction is done, i.e. max profit = 0.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 119 pascals traingle II</title>
    <link href="http://xytian315.github.io/2016/12/02/leetcode-119-pascals-traingle-II/"/>
    <id>http://xytian315.github.io/2016/12/02/leetcode-119-pascals-traingle-II/</id>
    <published>2016-12-03T06:31:44.000Z</published>
    <updated>2016-12-06T05:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-119-Pascal’s-Triangle-II"><a href="#Question-119-Pascal’s-Triangle-II" class="headerlink" title="Question: 119. Pascal’s Triangle II"></a>Question: 119. Pascal’s Triangle II</h3><p>Given an index k, return the kth row of the Pascal’s triangle.</p>
<p>For example, given k = 3,<br>Return [1,3,3,1].</p>
<p>Note:<br>Could you optimize your algorithm to use only O(k) extra space?<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//My solution, not O(k) space</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(rowIndex&lt;<span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        List&lt;Integer&gt; last = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        last.add(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(rowIndex==<span class="number">0</span>) <span class="keyword">return</span> last;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">1</span>; j&lt;=rowIndex; j++)&#123;</span><br><span class="line">            result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            result.add(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;last.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                result.add(last.get(i)+last.get(i+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(<span class="number">1</span>);</span><br><span class="line">            last = result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(k) space</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRow</span><span class="params">(<span class="keyword">int</span> rowIndex)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(rowIndex&lt;<span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=rowIndex;i++)&#123;</span><br><span class="line">            result.add(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                result.set(j, result.get(j)+result.get(j-<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>思路： 从后往前算 in place replace</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-119-Pascal’s-Triangle-II&quot;&gt;&lt;a href=&quot;#Question-119-Pascal’s-Triangle-II&quot; class=&quot;headerlink&quot; title=&quot;Question: 119. Pascal’s Triangle II&quot;&gt;&lt;/a&gt;Question: 119. Pascal’s Triangle II&lt;/h3&gt;&lt;p&gt;Given an index k, return the kth row of the Pascal’s triangle.&lt;/p&gt;
&lt;p&gt;For example, given k = 3,&lt;br&gt;Return [1,3,3,1].&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Could you optimize your algorithm to use only O(k) extra space?&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 118 pascal&#39;s triangle</title>
    <link href="http://xytian315.github.io/2016/12/02/leetcode-118-pascal-s-triangle/"/>
    <id>http://xytian315.github.io/2016/12/02/leetcode-118-pascal-s-triangle/</id>
    <published>2016-12-03T05:35:44.000Z</published>
    <updated>2016-12-06T05:12:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-118-Pascal’s-Triangle"><a href="#Question-118-Pascal’s-Triangle" class="headerlink" title="Question: 118. Pascal’s Triangle"></a>Question: 118. Pascal’s Triangle</h3><p>Given numRows, generate the first numRows of Pascal’s triangle.</p>
<p>For example, given numRows = 5,<br>Return</p>
<p>[<br>     [1],<br>    [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br> [1,4,6,4,1]<br>]<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(numRows&lt;=<span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; first = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        first.add(<span class="number">1</span>);</span><br><span class="line">        result.add(first);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=numRows;i++)&#123;</span><br><span class="line">            List&lt;Integer&gt; current = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            List&lt;Integer&gt; last = result.get(result.size()-<span class="number">1</span>);</span><br><span class="line">            current.add(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;last.size()-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                current.add(last.get(j)+last.get(j+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            current.add(<span class="number">1</span>);</span><br><span class="line">            result.add(current);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-118-Pascal’s-Triangle&quot;&gt;&lt;a href=&quot;#Question-118-Pascal’s-Triangle&quot; class=&quot;headerlink&quot; title=&quot;Question: 118. Pascal’s Triangle&quot;&gt;&lt;/a&gt;Question: 118. Pascal’s Triangle&lt;/h3&gt;&lt;p&gt;Given numRows, generate the first numRows of Pascal’s triangle.&lt;/p&gt;
&lt;p&gt;For example, given numRows = 5,&lt;br&gt;Return&lt;/p&gt;
&lt;p&gt;[&lt;br&gt;     [1],&lt;br&gt;    [1,1],&lt;br&gt;   [1,2,1],&lt;br&gt;  [1,3,3,1],&lt;br&gt; [1,4,6,4,1]&lt;br&gt;]&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 283 Move zeroes</title>
    <link href="http://xytian315.github.io/2016/12/02/leetcode-283-Move-zeroes/"/>
    <id>http://xytian315.github.io/2016/12/02/leetcode-283-Move-zeroes/</id>
    <published>2016-12-03T03:19:28.000Z</published>
    <updated>2016-12-06T05:13:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-283-Move-Zeroes"><a href="#Question-283-Move-Zeroes" class="headerlink" title="Question: 283. Move Zeroes"></a>Question: 283. Move Zeroes</h3><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p>
<p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p>
<p>Note:<br>You must do this in-place without making a copy of the array.<br>Minimize the total number of operations.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;nums.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[count]=nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(count&lt;nums.length)&#123;</span><br><span class="line">            nums[count]=<span class="number">0</span>;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>思路：<br>O(n)time O(1) space<br>1.loop the array from the beginning, use a slow runner to keep tracking the current index,<br>  if it is none zero, put that in the current index place. otherwise, continue.<br>2.put 0 to the remaining indexes.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-283-Move-Zeroes&quot;&gt;&lt;a href=&quot;#Question-283-Move-Zeroes&quot; class=&quot;headerlink&quot; title=&quot;Question: 283. Move Zeroes&quot;&gt;&lt;/a&gt;Question: 283. Move Zeroes&lt;/h3&gt;&lt;p&gt;Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.&lt;/p&gt;
&lt;p&gt;For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;You must do this in-place without making a copy of the array.&lt;br&gt;Minimize the total number of operations.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 448 Find All Numbers Disappeared in an Array</title>
    <link href="http://xytian315.github.io/2016/12/01/leetcode-448-Find-All-Numbers-Disappeared-in-an-Array/"/>
    <id>http://xytian315.github.io/2016/12/01/leetcode-448-Find-All-Numbers-Disappeared-in-an-Array/</id>
    <published>2016-12-02T06:47:49.000Z</published>
    <updated>2016-12-06T05:13:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-Find-All-Numbers-Disappeared-in-an-Array"><a href="#Question-Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Question: Find All Numbers Disappeared in an Array"></a>Question: Find All Numbers Disappeared in an Array</h3><p>Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.</p>
<p>Find all the elements of [1, n] inclusive that do not appear in this array.</p>
<p>Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.</p>
<p>Example:</p>
<p>Input:<br>[4,3,2,7,8,2,3,1]</p>
<p>Output:<br>[5,6]</p>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts:"></a>Thoughts:</h3><p>思路：<br>第一种简单解法O(n) space O(n) time<br>1把数组中的所有数字放到一个set中<br>2loop 从1到n, 如果数字i不在set中，即是答案disappeared number<br>第二种优化解法O(1) space O(n)time<br>1用index来标记是否数字出现于数组中， 如果数字在数组中，相应的index变成负数。nums[nums[i]-1] = -nums[nums[i]-1]<br>2loop array, 如果数字是正数，说明这个数字没有出现在数组中，既是答案<br>注：因为index是从0开始的，0到n-1, 而我们需要1到n, 所以纪录时要减1，最后结果要加1</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O(n) space O(n) time</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;nums.length;i++)&#123;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;= nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(i))&#123;</span><br><span class="line">                result.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NO extra space solution O(1) space O(n)time</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findDisappearedNumbers</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> value = Math.abs(nums[i])-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[value]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                nums[value] = -nums[value];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                result.add(i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-Find-All-Numbers-Disappeared-in-an-Array&quot;&gt;&lt;a href=&quot;#Question-Find-All-Numbers-Disappeared-in-an-Array&quot; class=&quot;headerlink&quot; t
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 26 Remove Duplicates from Sorted Array</title>
    <link href="http://xytian315.github.io/2016/10/03/leetcode-26/"/>
    <id>http://xytian315.github.io/2016/10/03/leetcode-26/</id>
    <published>2016-10-03T23:13:09.000Z</published>
    <updated>2016-12-07T04:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-26-Remove-Duplicates-from-Sorted-Array"><a href="#Question-26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="Question: 26. Remove Duplicates from Sorted Array"></a>Question: 26. Remove Duplicates from Sorted Array</h3><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p>
<p>Do not allocate extra space for another array, you must do this in place with constant memory.</p>
<p>For example,<br>Given input array nums = [1,1,2],</p>
<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.<br><a id="more"></a></p>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts:"></a>Thoughts:</h3><p>Two pointer technique<br><a href="https://leetcode.com/articles/two-pointer-technique/" target="_blank" rel="external">https://leetcode.com/articles/two-pointer-technique/</a><br>two pointer: one fast runner, one slow runner</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">0</span> || nums.length == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> nums.length;</span><br><span class="line">        <span class="keyword">int</span> current = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] != current) &#123;</span><br><span class="line">                current = nums[i];</span><br><span class="line">                nums[count] = nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-26-Remove-Duplicates-from-Sorted-Array&quot;&gt;&lt;a href=&quot;#Question-26-Remove-Duplicates-from-Sorted-Array&quot; class=&quot;headerlink&quot; title=&quot;Question: 26. Remove Duplicates from Sorted Array&quot;&gt;&lt;/a&gt;Question: 26. Remove Duplicates from Sorted Array&lt;/h3&gt;&lt;p&gt;Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this in place with constant memory.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given input array nums = [1,1,2],&lt;/p&gt;
&lt;p&gt;Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
  </entry>
  
</feed>
