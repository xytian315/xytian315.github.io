<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kristy&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xytian315.github.io/"/>
  <updated>2017-06-01T22:42:38.000Z</updated>
  <id>http://xytian315.github.io/</id>
  
  <author>
    <name>Kristy Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode 14 longest common prefix</title>
    <link href="http://xytian315.github.io/2017/06/01/leetcode-14-longest-common-prefix/"/>
    <id>http://xytian315.github.io/2017/06/01/leetcode-14-longest-common-prefix/</id>
    <published>2017-06-01T22:26:11.000Z</published>
    <updated>2017-06-01T22:42:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a>14. Longest Common Prefix</h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//on 06/01/2017</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">      <span class="comment">//brute force o(n2)</span></div><div class="line">      <span class="keyword">if</span>(strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">      <span class="keyword">char</span>[] firstChars = strs[<span class="number">0</span>].toCharArray();</div><div class="line">      StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;firstChars.length;i++)&#123;</div><div class="line">        <span class="keyword">char</span> c = firstChars[i];</div><div class="line">        <span class="keyword">int</span> j =<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(j&lt;strs.length)&#123;</div><div class="line">          <span class="keyword">if</span>(i&gt;strs[j].length()-<span class="number">1</span> || strs[j].charAt(i)!=c)&#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">          &#125;</div><div class="line">          j++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(j==strs.length)&#123;</div><div class="line">          sb.append(c);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">          <span class="keyword">return</span> sb.toString();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//discusion solution</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span>(strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">      String result = strs[<span class="number">0</span>];</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt;strs.length;i++)&#123;</div><div class="line">        <span class="keyword">while</span>(strs[i].indexOf(result)!=<span class="number">0</span>)&#123;</div><div class="line">          result = result.substring(<span class="number">0</span>, result.length()-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>use string method indexOf()  and substring()<br><a href="http://beginnersbook.com/2013/12/java-string-indexof-method-example/" target="_blank" rel="external">http://beginnersbook.com/2013/12/java-string-indexof-method-example/</a><br><a href="http://beginnersbook.com/2013/12/java-string-substring-method-example/" target="_blank" rel="external">http://beginnersbook.com/2013/12/java-string-substring-method-example/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;14-Longest-Common-Prefix&quot;&gt;&lt;a href=&quot;#14-Longest-Common-Prefix&quot; class=&quot;headerlink&quot; title=&quot;14. Longest Common Prefix&quot;&gt;&lt;/a&gt;14. Longest C
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="string" scheme="http://xytian315.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 35 Search Insert Position</title>
    <link href="http://xytian315.github.io/2017/05/17/leetcode-35-Search-Insert-Position/"/>
    <id>http://xytian315.github.io/2017/05/17/leetcode-35-Search-Insert-Position/</id>
    <published>2017-05-17T18:48:36.000Z</published>
    <updated>2017-05-22T01:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="35-Search-Insert-Position"><a href="#35-Search-Insert-Position" class="headerlink" title="35. Search Insert Position"></a>35. Search Insert Position</h3><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p>Here are few examples.<br>[1,3,5,6], 5 → 2<br>[1,3,5,6], 2 → 1<br>[1,3,5,6], 7 → 4<br>[1,3,5,6], 0 → 0</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(start&lt;end-<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> mid = (end-start)/<span class="number">2</span>+start;</div><div class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])&#123;</div><div class="line">                end = mid;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                start = mid;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(target&lt;=nums[start])&#123;</div><div class="line">            <span class="keyword">return</span> start;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (target&lt;=nums[end])&#123;</div><div class="line">            <span class="keyword">return</span> end;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> end+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">whoWin</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">  <span class="comment">//find the first people who got voted</span></div><div class="line">  <span class="keyword">int</span> i=<span class="number">1</span>;</div><div class="line">  <span class="keyword">int</span> j =<span class="number">1</span>;</div><div class="line">  <span class="keyword">while</span>(j&lt;=n)&#123;</div><div class="line">    <span class="keyword">if</span>(isVote(<span class="number">1</span>,j)== <span class="keyword">true</span>)&#123;</div><div class="line">      <span class="keyword">int</span> firstVoted = j;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      j++;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//loop the array to see if everybody else vote this guy</span></div><div class="line">  <span class="keyword">while</span>(i&lt;=n)&#123;</div><div class="line">    <span class="keyword">if</span>(isVoted(i,firstVoted) == <span class="keyword">false</span>)&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    i++;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> firstVoted;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;35-Search-Insert-Position&quot;&gt;&lt;a href=&quot;#35-Search-Insert-Position&quot; class=&quot;headerlink&quot; title=&quot;35. Search Insert Position&quot;&gt;&lt;/a&gt;35. Search
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="binary search" scheme="http://xytian315.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 125 Valid palindrome</title>
    <link href="http://xytian315.github.io/2017/04/26/leetcode-125-Valid-palindrome/"/>
    <id>http://xytian315.github.io/2017/04/26/leetcode-125-Valid-palindrome/</id>
    <published>2017-04-27T04:57:20.000Z</published>
    <updated>2017-05-02T02:50:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-125-Valid-Palindrome"><a href="#Question-125-Valid-Palindrome" class="headerlink" title="Question: 125. Valid Palindrome"></a>Question: 125. Valid Palindrome</h3><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.</p>
<p>For example,<br>“A man, a plan, a canal: Panama” is a palindrome.<br>“race a car” is not a palindrome.</p>
<p>Note:<br>Have you consider that the string might be empty? This is a good question to ask during an interview.</p>
<p>For the purpose of this problem, we define empty string as valid palindrome.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public boolean isPalindrome(String s) &#123;</div><div class="line">        ArrayList&lt;Character&gt; chars = new ArrayList&lt;Character&gt;();</div><div class="line">        for(int i=0;i&lt;=s.length()-1;i++)&#123;</div><div class="line">            char c=Character.toLowerCase(s.charAt(i));</div><div class="line">            if((c&gt;='a' &amp;&amp; c&lt;='z') || (c&gt;='0' &amp;&amp; c&lt;='9'))&#123;</div><div class="line">                chars.add(c);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if(chars.size()==0) return true;</div><div class="line">        int start = 0;</div><div class="line">        int end = chars.size()-1;</div><div class="line">        while(start&lt;end)&#123;</div><div class="line">            if(chars.get(start)!=chars.get(end))&#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            start++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//refactor</div><div class="line">public class Solution &#123;</div><div class="line">    public boolean isPalindrome(String s) &#123;</div><div class="line">        if(s.length()==0) return true;</div><div class="line">        int start = 0;</div><div class="line">        int end = s.length()-1;</div><div class="line">        while(start&lt;end)&#123;</div><div class="line">            if(!Character.isLetterOrDigit(s.charAt(start)))&#123;</div><div class="line">                start++;</div><div class="line">            &#125; else if(!Character.isLetterOrDigit(s.charAt(end)))&#123;</div><div class="line">                end--;</div><div class="line">            &#125; else &#123;</div><div class="line">                if (Character.toLowerCase(s.charAt(start))!=Character.toLowerCase(s.charAt(end)))&#123;</div><div class="line">                    return false;</div><div class="line">                &#125;</div><div class="line">                start++;</div><div class="line">                end--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line">### second time 05/01/2017</div><div class="line"></div><div class="line">``` java</div><div class="line">public class Solution &#123;</div><div class="line">    public boolean isPalindrome(String s) &#123;</div><div class="line">        </div><div class="line">        int start = 0;</div><div class="line">        int end = s.length()-1;</div><div class="line">        while(start&lt;end)&#123;</div><div class="line">            if(!((s.charAt(start)&gt;='a'&amp;&amp; s.charAt(start) &lt;='z') || (s.charAt(start) &gt;='A' &amp;&amp; s.charAt(start) &lt;='Z') || (s.charAt(start) &gt;='0' &amp;&amp; s.charAt(start)&lt;='9')))&#123;</div><div class="line">                start++;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            if(!((s.charAt(end)&gt;='a'&amp;&amp; s.charAt(end) &lt;='z') || (s.charAt(end) &gt;='A' &amp;&amp; s.charAt(end) &lt;='Z') || (s.charAt(end) &gt;='0' &amp;&amp; s.charAt(end)&lt;='9')))&#123;</div><div class="line">                end--;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            if(Character.toLowerCase(s.charAt(start)) != Character.toLowerCase(s.charAt(end)))&#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            start++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//remember Character.isLetterOrDigit() method</div><div class="line">//refactor</div><div class="line">public class Solution &#123;</div><div class="line">    public boolean isPalindrome(String s) &#123;</div><div class="line">        </div><div class="line">        int start = 0;</div><div class="line">        int end = s.length()-1;</div><div class="line">        while(start&lt;end)&#123;</div><div class="line">            if(!Character.isLetterOrDigit(s.charAt(start)))&#123;</div><div class="line">                start++;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            if(!Character.isLetterOrDigit(s.charAt(end)))&#123;</div><div class="line">                end--;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            if(Character.toLowerCase(s.charAt(start)) != Character.toLowerCase(s.charAt(end)))&#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            start++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Notes-Character-isLetterOrDigit-Character-toLowerCase"><a href="#Notes-Character-isLetterOrDigit-Character-toLowerCase" class="headerlink" title="Notes: Character.isLetterOrDigit() Character.toLowerCase()"></a>Notes: Character.isLetterOrDigit() Character.toLowerCase()</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-125-Valid-Palindrome&quot;&gt;&lt;a href=&quot;#Question-125-Valid-Palindrome&quot; class=&quot;headerlink&quot; title=&quot;Question: 125. Valid Palindrome&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
      <category term="string" scheme="http://xytian315.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 167 Two Sum II - Input array is sorted</title>
    <link href="http://xytian315.github.io/2017/04/25/leetcode-167-Two-Sum-II-Input-array-is-sorted/"/>
    <id>http://xytian315.github.io/2017/04/25/leetcode-167-Two-Sum-II-Input-array-is-sorted/</id>
    <published>2017-04-26T05:05:54.000Z</published>
    <updated>2017-04-26T05:50:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-167-Two-Sum-II-Input-array-is-sorted"><a href="#Question-167-Two-Sum-II-Input-array-is-sorted" class="headerlink" title="Question 167. Two Sum II - Input array is sorted"></a>Question 167. Two Sum II - Input array is sorted</h3><p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
<p>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//two pointer solution</span></div><div class="line"><span class="comment">//my solution not good O(n2)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> slow=<span class="number">0</span>; slow&lt;numbers.length-<span class="number">1</span>;slow++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> fast=slow+<span class="number">1</span>;fast&lt;=numbers.length-<span class="number">1</span>; fast++)&#123;</div><div class="line">                <span class="keyword">if</span>(numbers[fast]==target-numbers[slow])&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;slow+<span class="number">1</span>,fast+<span class="number">1</span>&#125;;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[fast]&gt; target-numbers[slow])&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//better solution O(n)</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> target) &#123;</div><div class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> fast = numbers.length-<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(slow&lt;fast)&#123;</div><div class="line">            <span class="keyword">if</span>(numbers[slow] + numbers[fast] == target)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;slow+<span class="number">1</span>,fast+<span class="number">1</span>&#125;;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[slow] + numbers[fast] &gt; target)&#123;</div><div class="line">                fast--;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                slow++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-167-Two-Sum-II-Input-array-is-sorted&quot;&gt;&lt;a href=&quot;#Question-167-Two-Sum-II-Input-array-is-sorted&quot; class=&quot;headerlink&quot; title=&quot;Qu
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
      <category term="array" scheme="http://xytian315.github.io/tags/array/"/>
    
      <category term="binary search" scheme="http://xytian315.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 69 sqrt(x)</title>
    <link href="http://xytian315.github.io/2017/02/04/leetcode-69-sqrt-x/"/>
    <id>http://xytian315.github.io/2017/02/04/leetcode-69-sqrt-x/</id>
    <published>2017-02-05T05:09:03.000Z</published>
    <updated>2017-02-05T05:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h3><p>Implement int sqrt(int x).</p>
<p>Compute and return the square root of x.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">//discuss answer</span>

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{
        <span class="keyword">if</span> (x == <span class="number">0</span>)
            <span class="keyword">return</span> <span class="number">0</span>;
        <span class="keyword">int</span> left = <span class="number">1</span>, right = x;
        <span class="keyword">while</span> (<span class="keyword">true</span>) {
            <span class="keyword">int</span> mid = left + (right - left)/<span class="number">2</span>;
            <span class="keyword">if</span> (mid &gt; x/mid) {
                right = mid - <span class="number">1</span>;
            } <span class="keyword">else</span> {
                <span class="keyword">if</span> (mid + <span class="number">1</span> &gt; x/(mid + <span class="number">1</span>))
                  <span class="keyword">return</span> mid;                          
                left = mid + <span class="number">1</span>;
            }
        }
    }
}
</code></pre>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>binary search</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h3&gt;&lt;p&gt;Implement int sqrt(int x).&lt;/p&gt;
&lt;p&gt;Compute an
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
      <category term="binary search" scheme="http://xytian315.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 67 Add Binary</title>
    <link href="http://xytian315.github.io/2017/02/02/leetcode-67-Add-Binary/"/>
    <id>http://xytian315.github.io/2017/02/02/leetcode-67-Add-Binary/</id>
    <published>2017-02-03T07:15:14.000Z</published>
    <updated>2017-02-03T19:43:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-67-Add-Binary"><a href="#Question-67-Add-Binary" class="headerlink" title="Question: 67. Add Binary"></a>Question: 67. Add Binary</h3><p>Given two binary strings, return their sum (also a binary string).</p>
<p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addBinary</span><span class="params">(String a, String b)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> i=a.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> j=b.length()-<span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line">        StringBuilder sb= <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || j&gt;=<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> temp=carry;</div><div class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">0</span>)</div><div class="line">                temp+=a.charAt(i--)-<span class="string">'0'</span>;</div><div class="line">            <span class="keyword">if</span>(j&gt;=<span class="number">0</span>)</div><div class="line">                temp+=b.charAt(j--)-<span class="string">'0'</span>;</div><div class="line">            sb.append(temp%<span class="number">2</span>);</div><div class="line">            carry=temp/<span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(carry!=<span class="number">0</span>)</div><div class="line">            sb.append(carry);</div><div class="line">        <span class="keyword">return</span> sb.reverse().toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>use StringBuilder;<br>StringBuilder has reverse() method;<br>there could be 3 use ()%2 and ()/2 to calculate the value and carry</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-67-Add-Binary&quot;&gt;&lt;a href=&quot;#Question-67-Add-Binary&quot; class=&quot;headerlink&quot; title=&quot;Question: 67. Add Binary&quot;&gt;&lt;/a&gt;Question: 67. Add 
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 13 Roman to Integer</title>
    <link href="http://xytian315.github.io/2017/01/31/leetcode-13-Roman-to-Integer/"/>
    <id>http://xytian315.github.io/2017/01/31/leetcode-13-Roman-to-Integer/</id>
    <published>2017-02-01T06:37:53.000Z</published>
    <updated>2017-06-01T19:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-13-Roman-to-Integer"><a href="#Question-13-Roman-to-Integer" class="headerlink" title="Question: 13. Roman to Integer"></a>Question: 13. Roman to Integer</h3><p>Given a roman numeral, convert it to an integer.</p>
<p>Input is guaranteed to be within the range from 1 to 3999.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//my first time solution on 01/31/2017</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</div><div class="line">        map.put(<span class="string">'I'</span>,<span class="number">1</span>);</div><div class="line">        map.put(<span class="string">'V'</span>,<span class="number">5</span>);</div><div class="line">        map.put(<span class="string">'X'</span>,<span class="number">10</span>);</div><div class="line">        map.put(<span class="string">'L'</span>,<span class="number">50</span>);</div><div class="line">        map.put(<span class="string">'C'</span>,<span class="number">100</span>);</div><div class="line">        map.put(<span class="string">'D'</span>,<span class="number">500</span>);</div><div class="line">        map.put(<span class="string">'M'</span>,<span class="number">1000</span>);</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(index&lt;=s.length()-<span class="number">2</span>)&#123;</div><div class="line">            Character c1 = s.charAt(index);</div><div class="line">            Character c2 = s.charAt(index+<span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> value1 = map.get(c1);</div><div class="line">            <span class="keyword">int</span> value2 = map.get(c2);</div><div class="line">            <span class="keyword">if</span>(value1&gt;=value2)&#123;</div><div class="line">                result+=value1;</div><div class="line">                index++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                result+=value2-value1;</div><div class="line">                index+=<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(index==s.length()-<span class="number">1</span>)</div><div class="line">            result+=map.get(s.charAt(index));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//refactor a little bit, MMXIV = M+M+X-I+V I was thinking "M+M+X+(V-I)" :(</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</div><div class="line">        map.put(<span class="string">'I'</span>,<span class="number">1</span>);</div><div class="line">        map.put(<span class="string">'V'</span>,<span class="number">5</span>);</div><div class="line">        map.put(<span class="string">'X'</span>,<span class="number">10</span>);</div><div class="line">        map.put(<span class="string">'L'</span>,<span class="number">50</span>);</div><div class="line">        map.put(<span class="string">'C'</span>,<span class="number">100</span>);</div><div class="line">        map.put(<span class="string">'D'</span>,<span class="number">500</span>);</div><div class="line">        map.put(<span class="string">'M'</span>,<span class="number">1000</span>);</div><div class="line">        <span class="keyword">int</span> result=<span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> index =<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(index&lt;=s.length()-<span class="number">2</span>)&#123;</div><div class="line">            Character c1 = s.charAt(index);</div><div class="line">            Character c2 = s.charAt(index+<span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> value1 = map.get(c1);</div><div class="line">            <span class="keyword">int</span> value2 = map.get(c2);</div><div class="line">            <span class="keyword">if</span>(value1&gt;=value2)&#123;</div><div class="line">                result+=value1;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                result-=value1;</div><div class="line">            &#125;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">        result+=map.get(s.charAt(index));</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//06/01/2017 </span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">      Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</div><div class="line">      map.put(<span class="string">'I'</span>, <span class="number">1</span>);</div><div class="line">      map.put(<span class="string">'V'</span>, <span class="number">5</span>);</div><div class="line">      map.put(<span class="string">'X'</span>, <span class="number">10</span>);</div><div class="line">      map.put(<span class="string">'L'</span>, <span class="number">50</span>);</div><div class="line">      map.put(<span class="string">'C'</span>, <span class="number">100</span>);</div><div class="line">      map.put(<span class="string">'D'</span>, <span class="number">500</span>);</div><div class="line">      map.put(<span class="string">'M'</span>, <span class="number">1000</span>);</div><div class="line">      <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length()-<span class="number">1</span>;i++)&#123;</div><div class="line">        <span class="keyword">int</span> value = map.get(s.charAt(i));</div><div class="line">        <span class="keyword">int</span> next = map.get(s.charAt(i+<span class="number">1</span>));</div><div class="line">        <span class="keyword">if</span>(next&lt;=value)&#123;</div><div class="line">          result+=value;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">          result-=value;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> result+map.get(s.charAt(s.length()-<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>besides map, we could also put into an integer array</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-13-Roman-to-Integer&quot;&gt;&lt;a href=&quot;#Question-13-Roman-to-Integer&quot; class=&quot;headerlink&quot; title=&quot;Question: 13. Roman to Integer&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 9 Palindrome Number</title>
    <link href="http://xytian315.github.io/2017/01/31/leetcode-9-Palindrome-Number/"/>
    <id>http://xytian315.github.io/2017/01/31/leetcode-9-Palindrome-Number/</id>
    <published>2017-01-31T08:01:38.000Z</published>
    <updated>2017-01-31T08:18:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h3><ol>
<li>Palindrome Number<br>Determine whether an integer is a palindrome. Do this without extra space.</li>
</ol>
<p>Some hints:<br>Could negative integers be palindromes? (ie, -1)</p>
<p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p>
<p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>
<p>There is a more generic way of solving this problem.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">//my solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{
        <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="comment">//find the length</span>
        <span class="keyword">int</span> temp = x;
        <span class="keyword">int</span> length=<span class="number">0</span>;
        <span class="keyword">while</span>(temp!=<span class="number">0</span>){
            temp=temp/<span class="number">10</span>;
            length++;
        }
        <span class="comment">// calculate the middle number</span>
        <span class="keyword">int</span> middle = length%<span class="number">2</span> !=<span class="number">0</span> ? length/<span class="number">2</span>+<span class="number">1</span> : length/<span class="number">2</span>;
        <span class="comment">//first half</span>
        <span class="keyword">int</span> front=x;
        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i&lt;=middle;i++){
            front=front/<span class="number">10</span>;
        }
        <span class="comment">//second half and reverse</span>
        <span class="keyword">int</span> value=x;
        <span class="keyword">int</span> back=<span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=length-middle;i++){
            <span class="keyword">int</span> tail = value%<span class="number">10</span>;
            back=back*<span class="number">10</span>+tail;
            value=value/<span class="number">10</span>;
        }
        <span class="keyword">return</span> front==back;

    }
}

<span class="comment">//smarter solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{
        <span class="keyword">if</span> (x&lt;<span class="number">0</span> || (x!=<span class="number">0</span> &amp;&amp; x%<span class="number">10</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;
        <span class="keyword">int</span> rev = <span class="number">0</span>;
        <span class="keyword">while</span> (x&gt;rev){
          rev = rev*<span class="number">10</span> + x%<span class="number">10</span>;
          x = x/<span class="number">10</span>;
        }
        <span class="keyword">return</span> (x==rev || x==rev/<span class="number">10</span>);
    }
}
</code></pre>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Negative number is not palindrome. </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Palindrome Number&lt;br&gt;Determine whether
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="math" scheme="http://xytian315.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 237 Delete Node in a Linked List</title>
    <link href="http://xytian315.github.io/2017/01/29/leetcode-237-Delete-Node-in-a-Linked-List/"/>
    <id>http://xytian315.github.io/2017/01/29/leetcode-237-Delete-Node-in-a-Linked-List/</id>
    <published>2017-01-30T02:11:13.000Z</published>
    <updated>2017-01-30T02:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-237-Delete-Node-in-a-Linked-List"><a href="#Question-237-Delete-Node-in-a-Linked-List" class="headerlink" title="Question: 237. Delete Node in a Linked List"></a>Question: 237. Delete Node in a Linked List</h3><p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p>
<p>Supposed the linked list is 1 -&gt; 2 -&gt; 3 -&gt; 4 and you are given the third node with value 3, the linked list should become 1 -&gt; 2 -&gt; 4 after calling your function.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</div><div class="line">        node.val=node.next.val;</div><div class="line">        node.next=node.next.next;</div><div class="line">            </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-237-Delete-Node-in-a-Linked-List&quot;&gt;&lt;a href=&quot;#Question-237-Delete-Node-in-a-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Question: 
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 234 Palindrome Linked List</title>
    <link href="http://xytian315.github.io/2017/01/28/leetcode-234-Palindrome-Linked-List/"/>
    <id>http://xytian315.github.io/2017/01/28/leetcode-234-Palindrome-Linked-List/</id>
    <published>2017-01-28T21:44:51.000Z</published>
    <updated>2017-01-29T06:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-234-Palindrome-Linked-List"><a href="#Question-234-Palindrome-Linked-List" class="headerlink" title="Question: 234. Palindrome Linked List"></a>Question: 234. Palindrome Linked List</h3><p>Given a singly linked list, determine if it is a palindrome.<br>Follow up:<br>Could you do it in O(n) time and O(1) space?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//calculate the length of the node</span></div><div class="line">        <span class="keyword">int</span> length=<span class="number">0</span>;</div><div class="line">        ListNode temp = head;</div><div class="line">        <span class="keyword">while</span>(temp!=<span class="keyword">null</span>)&#123;</div><div class="line">            temp=temp.next;</div><div class="line">            length++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//find the middle of the ListNode</span></div><div class="line">        ListNode middle=head;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;=length/<span class="number">2</span>-<span class="number">1</span>;i++)&#123;</div><div class="line">            middle=middle.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(length%<span class="number">2</span>!=<span class="number">0</span>)</div><div class="line">            middle=middle.next;</div><div class="line">        <span class="comment">//reverse the second half of the listNode</span></div><div class="line">        ListNode newMiddle=reverse(middle);</div><div class="line">        <span class="comment">//compare first half and reversed harlf of the listNode</span></div><div class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span> &amp;&amp; newMiddle!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(head.val!=newMiddle.val)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            head=head.next;</div><div class="line">            newMiddle=newMiddle.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span> || node.next==<span class="keyword">null</span>) <span class="keyword">return</span> node;</div><div class="line">        ListNode temp = node.next;</div><div class="line">        ListNode newHead=reverse(temp);</div><div class="line">        temp.next=node;</div><div class="line">        node.next=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> newHead;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//refactor a little bit, we don't need to get the length to find the middle of the ListNode,</span></div><div class="line"><span class="comment">//we can just use the two pointers to find the middle of the ListNode;</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>||head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="comment">//find the middle of the ListNode;</span></div><div class="line">        <span class="comment">//use two pointers one move one step, the other one move two steps</span></div><div class="line">        ListNode slow = head;</div><div class="line">        ListNode fast = head;</div><div class="line">        <span class="keyword">while</span>(fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            slow=slow.next;</div><div class="line">            fast=fast.next.next;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//odd numbers move one more into the other half</span></div><div class="line">        <span class="keyword">if</span>(fast!=<span class="keyword">null</span>)</div><div class="line">            slow=slow.next;</div><div class="line">        <span class="comment">//reverse the second half of the listNode</span></div><div class="line">        ListNode newMiddle=reverse(slow);</div><div class="line">        <span class="comment">//compare first half and reversed harlf of the listNode</span></div><div class="line">        <span class="keyword">while</span>(head!=<span class="keyword">null</span> &amp;&amp; newMiddle!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(head.val!=newMiddle.val)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            head=head.next;</div><div class="line">            newMiddle=newMiddle.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function">ListNode <span class="title">reverse</span><span class="params">(ListNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span> || node.next==<span class="keyword">null</span>) <span class="keyword">return</span> node;</div><div class="line">        ListNode temp = node.next;</div><div class="line">        ListNode newHead=reverse(temp);</div><div class="line">        temp.next=node;</div><div class="line">        node.next=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> newHead;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-234-Palindrome-Linked-List&quot;&gt;&lt;a href=&quot;#Question-234-Palindrome-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Question: 234. Palindr
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 206 Reverse Linked List</title>
    <link href="http://xytian315.github.io/2017/01/27/leetcode-206-Reverse-Linked-List/"/>
    <id>http://xytian315.github.io/2017/01/27/leetcode-206-Reverse-Linked-List/</id>
    <published>2017-01-28T05:44:33.000Z</published>
    <updated>2017-01-28T06:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-206-Reverse-Linked-List"><a href="#Question-206-Reverse-Linked-List" class="headerlink" title="Question: 206. Reverse Linked List"></a>Question: 206. Reverse Linked List</h3><p>Reverse a singly linked list.<br>recursive and iterative</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */</span>

<span class="comment">//my passed recursive solution </span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head==<span class="keyword">null</span>|| head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode node = head.next;
        <span class="keyword">if</span>(node.next!=<span class="keyword">null</span>){
            node=reverseList(node);
        }
        ListNode node2=node;
        <span class="keyword">while</span>(node2.next!=<span class="keyword">null</span>){
            node2=node2.next;
        }
        node2.next=head;
        head.next=<span class="keyword">null</span>;
        <span class="keyword">return</span> node;
    }
}
<span class="comment">//cleaner recursive solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head==<span class="keyword">null</span>|| head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode nodeNext = head.next;
        ListNode newHead = reverseList(nodeNext);
        nodeNext.next = head;
        head.next = <span class="keyword">null</span>;
        <span class="keyword">return</span> newHead;
    }
}

<span class="comment">//iterative solution</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head==<span class="keyword">null</span>|| head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode newHead = <span class="keyword">null</span>;
        <span class="keyword">while</span>(head!=<span class="keyword">null</span>){
            ListNode nodeNext = head.next;
            head.next=newHead;
            newHead=head;
            head=nodeNext;
        }
        <span class="keyword">return</span> newHead;
    }
}
</code></pre>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>recursive and iterative</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-206-Reverse-Linked-List&quot;&gt;&lt;a href=&quot;#Question-206-Reverse-Linked-List&quot; class=&quot;headerlink&quot; title=&quot;Question: 206. Reverse Linke
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 203 Remove Linked List Elements</title>
    <link href="http://xytian315.github.io/2017/01/27/leetcode-203-Remove-Linked-List-Elements/"/>
    <id>http://xytian315.github.io/2017/01/27/leetcode-203-Remove-Linked-List-Elements/</id>
    <published>2017-01-28T05:23:25.000Z</published>
    <updated>2017-01-28T05:39:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-203-Remove-Linked-List-Elements"><a href="#Question-203-Remove-Linked-List-Elements" class="headerlink" title="Question: 203. Remove Linked List Elements"></a>Question: 203. Remove Linked List Elements</h3><p>Remove all elements from a linked list of integers that have value val.</p>
<p>Example<br>Given: 1 –&gt; 2 –&gt; 6 –&gt; 3 –&gt; 4 –&gt; 5 –&gt; 6, val = 6<br>Return: 1 –&gt; 2 –&gt; 3 –&gt; 4 –&gt; 5</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//my one time pass solution haha:)</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> head;</div><div class="line">        <span class="keyword">if</span>(head.val==val) <span class="keyword">return</span> removeElements(head.next,val);</div><div class="line">        head.next = removeElements(head.next,val);</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//we can refactor a little bit</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        head.next = removeElements(head.next, val);</div><div class="line">        <span class="keyword">return</span>  head.val == val ? head.next : head;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>recursive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-203-Remove-Linked-List-Elements&quot;&gt;&lt;a href=&quot;#Question-203-Remove-Linked-List-Elements&quot; class=&quot;headerlink&quot; title=&quot;Question: 20
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 160 Intersection of Two Linked Lists</title>
    <link href="http://xytian315.github.io/2017/01/26/leetcode-160-Intersection-of-Two-Linked-Lists/"/>
    <id>http://xytian315.github.io/2017/01/26/leetcode-160-Intersection-of-Two-Linked-Lists/</id>
    <published>2017-01-27T05:23:55.000Z</published>
    <updated>2017-01-27T06:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-160-Intersection-of-Two-Linked-Lists"><a href="#Question-160-Intersection-of-Two-Linked-Lists" class="headerlink" title="Question: 160. Intersection of Two Linked Lists"></a>Question: 160. Intersection of Two Linked Lists</h3><p>Write a program to find the node at which the intersection of two singly linked lists begins.<br>For example, the following two linked lists:</p>
<p>A:          a1 → a2<br>                   ↘<br>                     c1 → c2 → c3<br>                   ↗<br>B:     b1 → b2 → b3<br>begin to intersect at node c1.</p>
<p>Notes:<br>If the two linked lists have no intersection at all, return null.<br>The linked lists must retain their original structure after the function returns.<br>You may assume there are no cycles anywhere in the entire linked structure.<br>Your code should preferably run in O(n) time and use only O(1) memory.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123;</div><div class="line"> *         val = x;</div><div class="line"> *         next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">//best solution</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(headA==<span class="keyword">null</span> || headB==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode a=headA;</div><div class="line">        ListNode b=headB;</div><div class="line">        <span class="keyword">while</span>(a!=b)&#123;</div><div class="line">            a= a==<span class="keyword">null</span> ? headB : a.next;</div><div class="line">            b= b==<span class="keyword">null</span> ? headA : b.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//another solution easy to understand</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//1, Get the length of the two lists.</span></div><div class="line"><span class="comment">//2, Align them to the same start point.</span></div><div class="line"><span class="comment">//3, Move them together until finding the intersection point, or the end null</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(headA==<span class="keyword">null</span> || headB==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span> lengthA=length(headA);</div><div class="line">        <span class="keyword">int</span> lengthB=length(headB);</div><div class="line">        <span class="keyword">while</span>(lengthA&gt;lengthB)&#123;</div><div class="line">            headA=headA.next;</div><div class="line">            lengthA--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(lengthA&lt;lengthB)&#123;</div><div class="line">            headB=headB.next;</div><div class="line">            lengthB--;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span>(headA!=headB)&#123;</div><div class="line">            headA=headA.next;</div><div class="line">            headB=headB.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> headA;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">(ListNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> result=<span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(node.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            node=node.next;</div><div class="line">            result++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p><a href="https://discuss.leetcode.com/topic/28067/java-solution-without-knowing-the-difference-in-len" target="_blank" rel="external">https://discuss.leetcode.com/topic/28067/java-solution-without-knowing-the-difference-in-len</a><br>We can use two iterations to do that. In the first iteration, we will reset the pointer of one linkedlist to the head of another linkedlist after it reaches the tail node. In the second iteration, we will move two pointers until they points to the same node. Our operations in first iteration will help us counteract the difference. So if two linkedlist intersects, the meeting point in second iteration must be the intersection point. If the two linked lists have no intersection at all, then the meeting pointer in second iteration must be the tail node of both lists, which is null</p>
<p> the two iterations will both run for listA.length + listB.length and will reach the intersection point at the same time after switching the pointer.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-160-Intersection-of-Two-Linked-Lists&quot;&gt;&lt;a href=&quot;#Question-160-Intersection-of-Two-Linked-Lists&quot; class=&quot;headerlink&quot; title=&quot;Qu
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 141 Linked List Cycle</title>
    <link href="http://xytian315.github.io/2017/01/25/Leetcode-141-Linked-List-Cycle/"/>
    <id>http://xytian315.github.io/2017/01/25/Leetcode-141-Linked-List-Cycle/</id>
    <published>2017-01-26T05:57:17.000Z</published>
    <updated>2017-01-26T06:26:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-141-Linked-List-Cycle"><a href="#Question-141-Linked-List-Cycle" class="headerlink" title="Question: 141. Linked List Cycle"></a>Question: 141. Linked List Cycle</h3><p>Given a linked list, determine if it has a cycle in it.</p>
<p>Follow up:<br>Can you solve it without using extra space?</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//my first time solution</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123;</div><div class="line"> *         val = x;</div><div class="line"> *         next = null;</div><div class="line"> *     &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Set&lt;ListNode&gt; set = <span class="keyword">new</span> HashSet&lt;ListNode&gt;();</div><div class="line">        <span class="keyword">while</span>(head.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(!set.add(head))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">             head=head.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//better solution!</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCycle</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        ListNode walker = head;</div><div class="line">        ListNode runner = head;</div><div class="line">        <span class="keyword">while</span>(runner.next!=<span class="keyword">null</span>&amp;&amp; runner.next.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            walker = walker.next;</div><div class="line">            runner = runner.next.next;</div><div class="line">            <span class="keyword">if</span>(walker == runner)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes:"></a>Notes:</h3><p>Floyd’s cycle-finding algorithm, also know as tortoise and hare algorithm. The idea is to have two pointers to the list and move them at different speeds. Move one forward by 1 node and the other by 2 nodes. If the linked list has a loop they will definitely meet.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-141-Linked-List-Cycle&quot;&gt;&lt;a href=&quot;#Question-141-Linked-List-Cycle&quot; class=&quot;headerlink&quot; title=&quot;Question: 141. Linked List Cycle
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 83 Removed duplicates from sorted list</title>
    <link href="http://xytian315.github.io/2017/01/24/leetcode-83-Removed-duplicates-from-sorted-list/"/>
    <id>http://xytian315.github.io/2017/01/24/leetcode-83-Removed-duplicates-from-sorted-list/</id>
    <published>2017-01-25T02:44:58.000Z</published>
    <updated>2017-01-25T05:48:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-83-Remove-Duplicates-from-Sorted-List"><a href="#Question-83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="Question: 83. Remove Duplicates from Sorted List"></a>Question: 83. Remove Duplicates from Sorted List</h3><p>Given a sorted linked list, delete all duplicates such that each element appear only once.</p>
<p>For example,<br>Given 1-&gt;1-&gt;2, return 1-&gt;2.<br>Given 1-&gt;1-&gt;2-&gt;3-&gt;3, return 1-&gt;2-&gt;3.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">//my first time solution</span>
<span class="comment">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        ListNode slow = head;
        ListNode fast = head.next;
        <span class="keyword">int</span> temp=slow.val;
        <span class="keyword">while</span>(slow!=<span class="keyword">null</span>&amp;&amp;fast!=<span class="keyword">null</span>){
           <span class="keyword">while</span>(fast.val==temp&amp;&amp;fast.next!=<span class="keyword">null</span>)
                fast=fast.next;
            <span class="keyword">if</span>(fast.val==temp){
                slow.next=<span class="keyword">null</span>;
                <span class="keyword">break</span>;
            }
            slow.next=fast;
            slow=slow.next;
            fast=fast.next;
            temp=slow.val;
        }
        <span class="keyword">return</span> head;

    }
}

<span class="comment">//better solution</span>

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>{
        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next==<span class="keyword">null</span>) <span class="keyword">return</span> head;
        head.next=deleteDuplicates(head.next);
        <span class="keyword">return</span> head.val==head.next.val ? head.next : head;
    }
}
</code></pre>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Recursive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-83-Remove-Duplicates-from-Sorted-List&quot;&gt;&lt;a href=&quot;#Question-83-Remove-Duplicates-from-Sorted-List&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 24 Swap Nodes in Pairs</title>
    <link href="http://xytian315.github.io/2017/01/23/leetcode-24-Swap-Nodes-in-Pairs/"/>
    <id>http://xytian315.github.io/2017/01/23/leetcode-24-Swap-Nodes-in-Pairs/</id>
    <published>2017-01-24T04:02:49.000Z</published>
    <updated>2017-01-24T04:06:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-24-Swap-Nodes-in-Pairs"><a href="#Question-24-Swap-Nodes-in-Pairs" class="headerlink" title="Question: 24. Swap Nodes in Pairs"></a>Question: 24. Swap Nodes in Pairs</h3><p>Given a linked list, swap every two adjacent nodes and return its head.</p>
<p>For example,<br>Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</p>
<p>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//my first time solution</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">      ListNode current = head;</div><div class="line">      <span class="keyword">if</span>(current == <span class="keyword">null</span> || current.next==<span class="keyword">null</span>)&#123;</div><div class="line">          <span class="keyword">return</span> current;</div><div class="line">      &#125;<span class="keyword">else</span>&#123;</div><div class="line">          ListNode temp1=current;</div><div class="line">          ListNode temp2=current.next;</div><div class="line">          ListNode temp3;</div><div class="line">          <span class="keyword">if</span>(temp2.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            temp3=temp2.next;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">else</span>&#123;</div><div class="line">            temp3=<span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line">         current=temp2;</div><div class="line">         temp2.next=temp1;</div><div class="line">         <span class="keyword">if</span>(temp3==<span class="keyword">null</span>)&#123;</div><div class="line">             temp1.next=<span class="keyword">null</span>;</div><div class="line">         &#125;<span class="keyword">else</span>&#123;</div><div class="line">             temp1.next=swapPairs(temp3);</div><div class="line">         &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//better solution</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next==<span class="keyword">null</span>)&#123;</div><div class="line">          <span class="keyword">return</span> head;</div><div class="line">      &#125;</div><div class="line">      ListNode temp = head.next;</div><div class="line">      head.next=swapPairs(head.next.next);</div><div class="line">      temp.next=head;</div><div class="line">      <span class="keyword">return</span> temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>recursive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-24-Swap-Nodes-in-Pairs&quot;&gt;&lt;a href=&quot;#Question-24-Swap-Nodes-in-Pairs&quot; class=&quot;headerlink&quot; title=&quot;Question: 24. Swap Nodes in Pa
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 21 Merged two sortd list</title>
    <link href="http://xytian315.github.io/2017/01/22/leetcode-21-Merged-two-sortd-list/"/>
    <id>http://xytian315.github.io/2017/01/22/leetcode-21-Merged-two-sortd-list/</id>
    <published>2017-01-23T05:06:48.000Z</published>
    <updated>2017-01-23T06:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-21-Merge-Two-Sorted-Lists"><a href="#Question-21-Merge-Two-Sorted-Lists" class="headerlink" title="Question: 21. Merge Two Sorted Lists"></a>Question: 21. Merge Two Sorted Lists</h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><pre><code class="java"><span class="comment">/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>{
        <span class="keyword">if</span>(l1==<span class="keyword">null</span>) <span class="keyword">return</span> l2;
        <span class="keyword">if</span>(l2==<span class="keyword">null</span>) <span class="keyword">return</span> l1;
        <span class="keyword">if</span>(l1.val&lt;l2.val){
            l1.next=mergeTwoLists(l1.next, l2);
            <span class="keyword">return</span> l1;
        }<span class="keyword">else</span>{
            l2.next=mergeTwoLists(l2.next,l1);
            <span class="keyword">return</span> l2;
        }

    }
}
</code></pre>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p>Recursive</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-21-Merge-Two-Sorted-Lists&quot;&gt;&lt;a href=&quot;#Question-21-Merge-Two-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;Question: 21. Merge Two 
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 19 Remove nth node from end of list</title>
    <link href="http://xytian315.github.io/2017/01/21/leetcode-19-Remove-nth-node-from-end-of-list/"/>
    <id>http://xytian315.github.io/2017/01/21/leetcode-19-Remove-nth-node-from-end-of-list/</id>
    <published>2017-01-22T02:57:37.000Z</published>
    <updated>2017-01-22T03:48:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-19-Remove-Nth-Node-From-End-of-List"><a href="#Question-19-Remove-Nth-Node-From-End-of-List" class="headerlink" title="Question: 19. Remove Nth Node From End of List"></a>Question: 19. Remove Nth Node From End of List</h3><p>Given a linked list, remove the nth node from the end of list and return its head.</p>
<p>For example,</p>
<p>   Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>
<p>   After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.<br>Note:<br>Given n will always be valid.<br>Try to do this in one pass.</p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * public class ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode next;</div><div class="line"> *     ListNode(int x) &#123; val = x; &#125;</div><div class="line"> * &#125;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="comment">//use two pointers one slow, one fast</span></div><div class="line">        ListNode start = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode slow = start;</div><div class="line">        ListNode fast = start;</div><div class="line">        slow.next = head;</div><div class="line">        <span class="comment">//make the gap between slow and fast to be n </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n;i++)&#123;</div><div class="line">            fast = fast.next;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//move the slow and fast pointer until the end of the node, keep the same distance</span></div><div class="line">        <span class="keyword">while</span>(fast.next!=<span class="keyword">null</span>)&#123;</div><div class="line">            fast = fast.next;</div><div class="line">            slow = slow.next;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//slow's next one is the one we want to remove</span></div><div class="line">        slow.next = slow.next.next;</div><div class="line">        <span class="comment">//return the orginal head</span></div><div class="line">        <span class="keyword">return</span> start.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><p><a href="https://discuss.leetcode.com/topic/7031/simple-java-solution-in-one-pass" target="_blank" rel="external">https://discuss.leetcode.com/topic/7031/simple-java-solution-in-one-pass</a><br>Move one pointer fast –&gt; n+1 places forward, to maintain a gap of n between the two pointers and then move both at the same speed. Finally, when the fast pointer reaches the end, the slow pointer will be n+1 places behind - just the right spot for it to be able to skip the next node.</p>
<p>Since the question gives that n is valid, not too many checks have to be put in place. Otherwise, this would be necessary.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-19-Remove-Nth-Node-From-End-of-List&quot;&gt;&lt;a href=&quot;#Question-19-Remove-Nth-Node-From-End-of-List&quot; class=&quot;headerlink&quot; title=&quot;Ques
    
    </summary>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="linked list" scheme="http://xytian315.github.io/tags/linked-list/"/>
    
      <category term="two pointers" scheme="http://xytian315.github.io/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 438 Find all anagrams in a string</title>
    <link href="http://xytian315.github.io/2016/12/13/leetcode-438-Find-all-anagrams-in-a-string/"/>
    <id>http://xytian315.github.io/2016/12/13/leetcode-438-Find-all-anagrams-in-a-string/</id>
    <published>2016-12-13T08:11:15.000Z</published>
    <updated>2016-12-13T08:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-438-Find-All-Anagrams-in-a-String"><a href="#Question-438-Find-All-Anagrams-in-a-String" class="headerlink" title="Question: 438. Find All Anagrams in a String"></a>Question: 438. Find All Anagrams in a String</h3><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p>
<p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p>
<p>The order of output does not matter.</p>
<p>Example 1:</p>
<p>Input:<br>s: “cbaebabacd” p: “abc”</p>
<p>Output:<br>[0, 6]</p>
<p>Explanation:<br>The substring with start index = 0 is “cba”, which is an anagram of “abc”.<br>The substring with start index = 6 is “bac”, which is an anagram of “abc”.<br>Example 2:</p>
<p>Input:<br>s: “abab” p: “ab”</p>
<p>Output:<br>[0, 1, 2]</p>
<p>Explanation:<br>The substring with start index = 0 is “ab”, which is an anagram of “ab”.<br>The substring with start index = 1 is “ba”, which is an anagram of “ab”.<br>The substring with start index = 2 is “ab”, which is an anagram of “ab”.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || p == <span class="keyword">null</span> || p.length() == <span class="number">0</span>) <span class="keyword">return</span> list;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span>[] hash = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>]; <span class="comment">//character hash</span></div><div class="line">    </div><div class="line">    <span class="comment">//record each character in p to hash</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : p.toCharArray()) &#123;</div><div class="line">        hash[c]++;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//two points, initialize count to p's length</span></div><div class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, count = p.length();</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> (right &lt; s.length()) &#123;</div><div class="line">        <span class="comment">//move right everytime, if the character exists in p's hash, decrease the count</span></div><div class="line">        <span class="comment">//current hash value &gt;= 1 means the character is existing in p</span></div><div class="line">        <span class="keyword">if</span> (hash[s.charAt(right)] &gt;= <span class="number">1</span>) &#123;</div><div class="line">            count--;</div><div class="line">        &#125;</div><div class="line">        hash[s.charAt(right)]--;</div><div class="line">        right++;</div><div class="line">        </div><div class="line">        <span class="comment">//when the count is down to 0, means we found the right anagram</span></div><div class="line">        <span class="comment">//then add window's left to result list</span></div><div class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">            list.add(left);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//if we find the window's size equals to p, then we have to move left (narrow the window) to find the new match window</span></div><div class="line">        <span class="comment">//++ to reset the hash because we kicked out the left</span></div><div class="line">        <span class="comment">//only increase the count if the character is in p</span></div><div class="line">        <span class="comment">//the count &gt;= 0 indicate it was original in the hash, cuz it won't go below 0</span></div><div class="line">        <span class="keyword">if</span> (right - left == p.length() ) &#123;</div><div class="line">           </div><div class="line">            <span class="keyword">if</span> (hash[s.charAt(left)] &gt;= <span class="number">0</span>) &#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">            hash[s.charAt(left)]++;</div><div class="line">            left++;</div><div class="line">        </div><div class="line">        &#125;</div><div class="line"></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p><a href="https://discuss.leetcode.com/topic/64434/shortest-concise-java-o-n-sliding-window-solution/4" target="_blank" rel="external">https://discuss.leetcode.com/topic/64434/shortest-concise-java-o-n-sliding-window-solution/4</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-438-Find-All-Anagrams-in-a-String&quot;&gt;&lt;a href=&quot;#Question-438-Find-All-Anagrams-in-a-String&quot; class=&quot;headerlink&quot; title=&quot;Question: 438. Find All Anagrams in a String&quot;&gt;&lt;/a&gt;Question: 438. Find All Anagrams in a String&lt;/h3&gt;&lt;p&gt;Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.&lt;/p&gt;
&lt;p&gt;Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.&lt;/p&gt;
&lt;p&gt;The order of output does not matter.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;s: “cbaebabacd” p: “abc”&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;[0, 6]&lt;/p&gt;
&lt;p&gt;Explanation:&lt;br&gt;The substring with start index = 0 is “cba”, which is an anagram of “abc”.&lt;br&gt;The substring with start index = 6 is “bac”, which is an anagram of “abc”.&lt;br&gt;Example 2:&lt;/p&gt;
&lt;p&gt;Input:&lt;br&gt;s: “abab” p: “ab”&lt;/p&gt;
&lt;p&gt;Output:&lt;br&gt;[0, 1, 2]&lt;/p&gt;
&lt;p&gt;Explanation:&lt;br&gt;The substring with start index = 0 is “ab”, which is an anagram of “ab”.&lt;br&gt;The substring with start index = 1 is “ba”, which is an anagram of “ab”.&lt;br&gt;The substring with start index = 2 is “ab”, which is an anagram of “ab”.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 409 Longest Palindrome</title>
    <link href="http://xytian315.github.io/2016/12/11/leetcode-409-Longest-Palindrome/"/>
    <id>http://xytian315.github.io/2016/12/11/leetcode-409-Longest-Palindrome/</id>
    <published>2016-12-12T05:24:46.000Z</published>
    <updated>2016-12-12T05:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Question-409-Longest-Palindrome"><a href="#Question-409-Longest-Palindrome" class="headerlink" title="Question: 409. Longest Palindrome"></a>Question: 409. Longest Palindrome</h3><p>Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.</p>
<p>This is case sensitive, for example “Aa” is not considered a palindrome here.</p>
<p>Note:<br>Assume the length of given string will not exceed 1,010.<br><a id="more"></a></p>
<h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;Character&gt;();</div><div class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</div><div class="line">            <span class="keyword">char</span> c = s.charAt(i);</div><div class="line">            <span class="keyword">if</span>(set.contains(c))&#123;</div><div class="line">                set.remove(c);</div><div class="line">                count+=<span class="number">2</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                set.add(c);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!set.isEmpty()) count++;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p> just count the number of same pairs, then this can be used to put in the different direction to consist of palindrome. Then if there exist more chars, we can put one in the middle</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Question-409-Longest-Palindrome&quot;&gt;&lt;a href=&quot;#Question-409-Longest-Palindrome&quot; class=&quot;headerlink&quot; title=&quot;Question: 409. Longest Palindrome&quot;&gt;&lt;/a&gt;Question: 409. Longest Palindrome&lt;/h3&gt;&lt;p&gt;Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.&lt;/p&gt;
&lt;p&gt;This is case sensitive, for example “Aa” is not considered a palindrome here.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Assume the length of given string will not exceed 1,010.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://xytian315.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://xytian315.github.io/tags/leetcode/"/>
    
      <category term="easy" scheme="http://xytian315.github.io/tags/easy/"/>
    
      <category term="hash table" scheme="http://xytian315.github.io/tags/hash-table/"/>
    
  </entry>
  
</feed>
